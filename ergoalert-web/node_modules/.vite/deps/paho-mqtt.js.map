{
  "version": 3,
  "sources": ["../../paho-mqtt/paho-mqtt.js"],
  "sourcesContent": ["/*******************************************************************************\n * Copyright (c) 2013 IBM Corp.\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * and Eclipse Distribution License v1.0 which accompany this distribution.\n *\n * The Eclipse Public License is available at\n *    http://www.eclipse.org/legal/epl-v10.html\n * and the Eclipse Distribution License is available at\n *   http://www.eclipse.org/org/documents/edl-v10.php.\n *\n * Contributors:\n *    Andrew Banks - initial API and implementation and initial documentation\n *******************************************************************************/\n\n\n// Only expose a single object name in the global namespace.\n// Everything must go through this module. Global Paho module\n// only has a single public function, client, which returns\n// a Paho client object given connection details.\n\n/**\n * Send and receive messages using web browsers.\n * <p>\n * This programming interface lets a JavaScript client application use the MQTT V3.1 or\n * V3.1.1 protocol to connect to an MQTT-supporting messaging server.\n *\n * The function supported includes:\n * <ol>\n * <li>Connecting to and disconnecting from a server. The server is identified by its host name and port number.\n * <li>Specifying options that relate to the communications link with the server,\n * for example the frequency of keep-alive heartbeats, and whether SSL/TLS is required.\n * <li>Subscribing to and receiving messages from MQTT Topics.\n * <li>Publishing messages to MQTT Topics.\n * </ol>\n * <p>\n * The API consists of two main objects:\n * <dl>\n * <dt><b>{@link Paho.Client}</b></dt>\n * <dd>This contains methods that provide the functionality of the API,\n * including provision of callbacks that notify the application when a message\n * arrives from or is delivered to the messaging server,\n * or when the status of its connection to the messaging server changes.</dd>\n * <dt><b>{@link Paho.Message}</b></dt>\n * <dd>This encapsulates the payload of the message along with various attributes\n * associated with its delivery, in particular the destination to which it has\n * been (or is about to be) sent.</dd>\n * </dl>\n * <p>\n * The programming interface validates parameters passed to it, and will throw\n * an Error containing an error message intended for developer use, if it detects\n * an error with any parameter.\n * <p>\n * Example:\n *\n * <code><pre>\nvar client = new Paho.MQTT.Client(location.hostname, Number(location.port), \"clientId\");\nclient.onConnectionLost = onConnectionLost;\nclient.onMessageArrived = onMessageArrived;\nclient.connect({onSuccess:onConnect});\n\nfunction onConnect() {\n  // Once a connection has been made, make a subscription and send a message.\n  console.log(\"onConnect\");\n  client.subscribe(\"/World\");\n  var message = new Paho.MQTT.Message(\"Hello\");\n  message.destinationName = \"/World\";\n  client.send(message);\n};\nfunction onConnectionLost(responseObject) {\n  if (responseObject.errorCode !== 0)\n\tconsole.log(\"onConnectionLost:\"+responseObject.errorMessage);\n};\nfunction onMessageArrived(message) {\n  console.log(\"onMessageArrived:\"+message.payloadString);\n  client.disconnect();\n};\n * </pre></code>\n * @namespace Paho\n */\n\n/* jshint shadow:true */\n(function ExportLibrary(root, factory) {\n\tif(typeof exports === \"object\" && typeof module === \"object\"){\n\t\tmodule.exports = factory();\n\t} else if (typeof define === \"function\" && define.amd){\n\t\tdefine(factory);\n\t} else if (typeof exports === \"object\"){\n\t\texports = factory();\n\t} else {\n\t\t//if (typeof root.Paho === \"undefined\"){\n\t\t//\troot.Paho = {};\n\t\t//}\n\t\troot.Paho = factory();\n\t}\n})(this, function LibraryFactory(){\n\n\n\tvar PahoMQTT = (function (global) {\n\n\t// Private variables below, these are only visible inside the function closure\n\t// which is used to define the module.\n\tvar version = \"@VERSION@-@BUILDLEVEL@\";\n\n\t/**\n\t * @private\n\t */\n\tvar localStorage = global.localStorage || (function () {\n\t\tvar data = {};\n\n\t\treturn {\n\t\t\tsetItem: function (key, item) { data[key] = item; },\n\t\t\tgetItem: function (key) { return data[key]; },\n\t\t\tremoveItem: function (key) { delete data[key]; },\n\t\t};\n\t})();\n\n\t\t/**\n\t * Unique message type identifiers, with associated\n\t * associated integer values.\n\t * @private\n\t */\n\t\tvar MESSAGE_TYPE = {\n\t\t\tCONNECT: 1,\n\t\t\tCONNACK: 2,\n\t\t\tPUBLISH: 3,\n\t\t\tPUBACK: 4,\n\t\t\tPUBREC: 5,\n\t\t\tPUBREL: 6,\n\t\t\tPUBCOMP: 7,\n\t\t\tSUBSCRIBE: 8,\n\t\t\tSUBACK: 9,\n\t\t\tUNSUBSCRIBE: 10,\n\t\t\tUNSUBACK: 11,\n\t\t\tPINGREQ: 12,\n\t\t\tPINGRESP: 13,\n\t\t\tDISCONNECT: 14\n\t\t};\n\n\t\t// Collection of utility methods used to simplify module code\n\t\t// and promote the DRY pattern.\n\n\t\t/**\n\t * Validate an object's parameter names to ensure they\n\t * match a list of expected variables name for this option\n\t * type. Used to ensure option object passed into the API don't\n\t * contain erroneous parameters.\n\t * @param {Object} obj - User options object\n\t * @param {Object} keys - valid keys and types that may exist in obj.\n\t * @throws {Error} Invalid option parameter found.\n\t * @private\n\t */\n\t\tvar validate = function(obj, keys) {\n\t\t\tfor (var key in obj) {\n\t\t\t\tif (obj.hasOwnProperty(key)) {\n\t\t\t\t\tif (keys.hasOwnProperty(key)) {\n\t\t\t\t\t\tif (typeof obj[key] !== keys[key])\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof obj[key], key]));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar errorStr = \"Unknown property, \" + key + \". Valid properties are:\";\n\t\t\t\t\t\tfor (var validKey in keys)\n\t\t\t\t\t\t\tif (keys.hasOwnProperty(validKey))\n\t\t\t\t\t\t\t\terrorStr = errorStr+\" \"+validKey;\n\t\t\t\t\t\tthrow new Error(errorStr);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Return a new function which runs the user function bound\n\t * to a fixed scope.\n\t * @param {function} User function\n\t * @param {object} Function scope\n\t * @return {function} User function bound to another scope\n\t * @private\n\t */\n\t\tvar scope = function (f, scope) {\n\t\t\treturn function () {\n\t\t\t\treturn f.apply(scope, arguments);\n\t\t\t};\n\t\t};\n\n\t\t/**\n\t * Unique message type identifiers, with associated\n\t * associated integer values.\n\t * @private\n\t */\n\t\tvar ERROR = {\n\t\t\tOK: {code:0, text:\"AMQJSC0000I OK.\"},\n\t\t\tCONNECT_TIMEOUT: {code:1, text:\"AMQJSC0001E Connect timed out.\"},\n\t\t\tSUBSCRIBE_TIMEOUT: {code:2, text:\"AMQJS0002E Subscribe timed out.\"},\n\t\t\tUNSUBSCRIBE_TIMEOUT: {code:3, text:\"AMQJS0003E Unsubscribe timed out.\"},\n\t\t\tPING_TIMEOUT: {code:4, text:\"AMQJS0004E Ping timed out.\"},\n\t\t\tINTERNAL_ERROR: {code:5, text:\"AMQJS0005E Internal error. Error Message: {0}, Stack trace: {1}\"},\n\t\t\tCONNACK_RETURNCODE: {code:6, text:\"AMQJS0006E Bad Connack return code:{0} {1}.\"},\n\t\t\tSOCKET_ERROR: {code:7, text:\"AMQJS0007E Socket error:{0}.\"},\n\t\t\tSOCKET_CLOSE: {code:8, text:\"AMQJS0008I Socket closed.\"},\n\t\t\tMALFORMED_UTF: {code:9, text:\"AMQJS0009E Malformed UTF data:{0} {1} {2}.\"},\n\t\t\tUNSUPPORTED: {code:10, text:\"AMQJS0010E {0} is not supported by this browser.\"},\n\t\t\tINVALID_STATE: {code:11, text:\"AMQJS0011E Invalid state {0}.\"},\n\t\t\tINVALID_TYPE: {code:12, text:\"AMQJS0012E Invalid type {0} for {1}.\"},\n\t\t\tINVALID_ARGUMENT: {code:13, text:\"AMQJS0013E Invalid argument {0} for {1}.\"},\n\t\t\tUNSUPPORTED_OPERATION: {code:14, text:\"AMQJS0014E Unsupported operation.\"},\n\t\t\tINVALID_STORED_DATA: {code:15, text:\"AMQJS0015E Invalid data in local storage key={0} value={1}.\"},\n\t\t\tINVALID_MQTT_MESSAGE_TYPE: {code:16, text:\"AMQJS0016E Invalid MQTT message type {0}.\"},\n\t\t\tMALFORMED_UNICODE: {code:17, text:\"AMQJS0017E Malformed Unicode string:{0} {1}.\"},\n\t\t\tBUFFER_FULL: {code:18, text:\"AMQJS0018E Message buffer is full, maximum buffer size: {0}.\"},\n\t\t};\n\n\t\t/** CONNACK RC Meaning. */\n\t\tvar CONNACK_RC = {\n\t\t\t0:\"Connection Accepted\",\n\t\t\t1:\"Connection Refused: unacceptable protocol version\",\n\t\t\t2:\"Connection Refused: identifier rejected\",\n\t\t\t3:\"Connection Refused: server unavailable\",\n\t\t\t4:\"Connection Refused: bad user name or password\",\n\t\t\t5:\"Connection Refused: not authorized\"\n\t\t};\n\n\t/**\n\t * Format an error message text.\n\t * @private\n\t * @param {error} ERROR value above.\n\t * @param {substitutions} [array] substituted into the text.\n\t * @return the text with the substitutions made.\n\t */\n\t\tvar format = function(error, substitutions) {\n\t\t\tvar text = error.text;\n\t\t\tif (substitutions) {\n\t\t\t\tvar field,start;\n\t\t\t\tfor (var i=0; i<substitutions.length; i++) {\n\t\t\t\t\tfield = \"{\"+i+\"}\";\n\t\t\t\t\tstart = text.indexOf(field);\n\t\t\t\t\tif(start > 0) {\n\t\t\t\t\t\tvar part1 = text.substring(0,start);\n\t\t\t\t\t\tvar part2 = text.substring(start+field.length);\n\t\t\t\t\t\ttext = part1+substitutions[i]+part2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn text;\n\t\t};\n\n\t\t//MQTT protocol and version          6    M    Q    I    s    d    p    3\n\t\tvar MqttProtoIdentifierv3 = [0x00,0x06,0x4d,0x51,0x49,0x73,0x64,0x70,0x03];\n\t\t//MQTT proto/version for 311         4    M    Q    T    T    4\n\t\tvar MqttProtoIdentifierv4 = [0x00,0x04,0x4d,0x51,0x54,0x54,0x04];\n\n\t\t/**\n\t * Construct an MQTT wire protocol message.\n\t * @param type MQTT packet type.\n\t * @param options optional wire message attributes.\n\t *\n\t * Optional properties\n\t *\n\t * messageIdentifier: message ID in the range [0..65535]\n\t * payloadMessage:\tApplication Message - PUBLISH only\n\t * connectStrings:\tarray of 0 or more Strings to be put into the CONNECT payload\n\t * topics:\t\t\tarray of strings (SUBSCRIBE, UNSUBSCRIBE)\n\t * requestQoS:\t\tarray of QoS values [0..2]\n\t *\n\t * \"Flag\" properties\n\t * cleanSession:\ttrue if present / false if absent (CONNECT)\n\t * willMessage:  \ttrue if present / false if absent (CONNECT)\n\t * isRetained:\t\ttrue if present / false if absent (CONNECT)\n\t * userName:\t\ttrue if present / false if absent (CONNECT)\n\t * password:\t\ttrue if present / false if absent (CONNECT)\n\t * keepAliveInterval:\tinteger [0..65535]  (CONNECT)\n\t *\n\t * @private\n\t * @ignore\n\t */\n\t\tvar WireMessage = function (type, options) {\n\t\t\tthis.type = type;\n\t\t\tfor (var name in options) {\n\t\t\t\tif (options.hasOwnProperty(name)) {\n\t\t\t\t\tthis[name] = options[name];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tWireMessage.prototype.encode = function() {\n\t\t// Compute the first byte of the fixed header\n\t\t\tvar first = ((this.type & 0x0f) << 4);\n\n\t\t\t/*\n\t\t * Now calculate the length of the variable header + payload by adding up the lengths\n\t\t * of all the component parts\n\t\t */\n\n\t\t\tvar remLength = 0;\n\t\t\tvar topicStrLength = [];\n\t\t\tvar destinationNameLength = 0;\n\t\t\tvar willMessagePayloadBytes;\n\n\t\t\t// if the message contains a messageIdentifier then we need two bytes for that\n\t\t\tif (this.messageIdentifier !== undefined)\n\t\t\t\tremLength += 2;\n\n\t\t\tswitch(this.type) {\n\t\t\t// If this a Connect then we need to include 12 bytes for its header\n\t\t\tcase MESSAGE_TYPE.CONNECT:\n\t\t\t\tswitch(this.mqttVersion) {\n\t\t\t\tcase 3:\n\t\t\t\t\tremLength += MqttProtoIdentifierv3.length + 3;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tremLength += MqttProtoIdentifierv4.length + 3;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tremLength += UTF8Length(this.clientId) + 2;\n\t\t\t\tif (this.willMessage !== undefined) {\n\t\t\t\t\tremLength += UTF8Length(this.willMessage.destinationName) + 2;\n\t\t\t\t\t// Will message is always a string, sent as UTF-8 characters with a preceding length.\n\t\t\t\t\twillMessagePayloadBytes = this.willMessage.payloadBytes;\n\t\t\t\t\tif (!(willMessagePayloadBytes instanceof Uint8Array))\n\t\t\t\t\t\twillMessagePayloadBytes = new Uint8Array(payloadBytes);\n\t\t\t\t\tremLength += willMessagePayloadBytes.byteLength +2;\n\t\t\t\t}\n\t\t\t\tif (this.userName !== undefined)\n\t\t\t\t\tremLength += UTF8Length(this.userName) + 2;\n\t\t\t\tif (this.password !== undefined)\n\t\t\t\t\tremLength += UTF8Length(this.password) + 2;\n\t\t\t\tbreak;\n\n\t\t\t// Subscribe, Unsubscribe can both contain topic strings\n\t\t\tcase MESSAGE_TYPE.SUBSCRIBE:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tfor ( var i = 0; i < this.topics.length; i++) {\n\t\t\t\t\ttopicStrLength[i] = UTF8Length(this.topics[i]);\n\t\t\t\t\tremLength += topicStrLength[i] + 2;\n\t\t\t\t}\n\t\t\t\tremLength += this.requestedQos.length; // 1 byte for each topic's Qos\n\t\t\t\t// QoS on Subscribe only\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.UNSUBSCRIBE:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tfor ( var i = 0; i < this.topics.length; i++) {\n\t\t\t\t\ttopicStrLength[i] = UTF8Length(this.topics[i]);\n\t\t\t\t\tremLength += topicStrLength[i] + 2;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBREL:\n\t\t\t\tfirst |= 0x02; // Qos = 1;\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tif (this.payloadMessage.duplicate) first |= 0x08;\n\t\t\t\tfirst  = first |= (this.payloadMessage.qos << 1);\n\t\t\t\tif (this.payloadMessage.retained) first |= 0x01;\n\t\t\t\tdestinationNameLength = UTF8Length(this.payloadMessage.destinationName);\n\t\t\t\tremLength += destinationNameLength + 2;\n\t\t\t\tvar payloadBytes = this.payloadMessage.payloadBytes;\n\t\t\t\tremLength += payloadBytes.byteLength;\n\t\t\t\tif (payloadBytes instanceof ArrayBuffer)\n\t\t\t\t\tpayloadBytes = new Uint8Array(payloadBytes);\n\t\t\t\telse if (!(payloadBytes instanceof Uint8Array))\n\t\t\t\t\tpayloadBytes = new Uint8Array(payloadBytes.buffer);\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.DISCONNECT:\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Now we can allocate a buffer for the message\n\n\t\t\tvar mbi = encodeMBI(remLength);  // Convert the length to MQTT MBI format\n\t\t\tvar pos = mbi.length + 1;        // Offset of start of variable header\n\t\t\tvar buffer = new ArrayBuffer(remLength + pos);\n\t\t\tvar byteStream = new Uint8Array(buffer);    // view it as a sequence of bytes\n\n\t\t\t//Write the fixed header into the buffer\n\t\t\tbyteStream[0] = first;\n\t\t\tbyteStream.set(mbi,1);\n\n\t\t\t// If this is a PUBLISH then the variable header starts with a topic\n\t\t\tif (this.type == MESSAGE_TYPE.PUBLISH)\n\t\t\t\tpos = writeString(this.payloadMessage.destinationName, destinationNameLength, byteStream, pos);\n\t\t\t// If this is a CONNECT then the variable header contains the protocol name/version, flags and keepalive time\n\n\t\t\telse if (this.type == MESSAGE_TYPE.CONNECT) {\n\t\t\t\tswitch (this.mqttVersion) {\n\t\t\t\tcase 3:\n\t\t\t\t\tbyteStream.set(MqttProtoIdentifierv3, pos);\n\t\t\t\t\tpos += MqttProtoIdentifierv3.length;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tbyteStream.set(MqttProtoIdentifierv4, pos);\n\t\t\t\t\tpos += MqttProtoIdentifierv4.length;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tvar connectFlags = 0;\n\t\t\t\tif (this.cleanSession)\n\t\t\t\t\tconnectFlags = 0x02;\n\t\t\t\tif (this.willMessage !== undefined ) {\n\t\t\t\t\tconnectFlags |= 0x04;\n\t\t\t\t\tconnectFlags |= (this.willMessage.qos<<3);\n\t\t\t\t\tif (this.willMessage.retained) {\n\t\t\t\t\t\tconnectFlags |= 0x20;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.userName !== undefined)\n\t\t\t\t\tconnectFlags |= 0x80;\n\t\t\t\tif (this.password !== undefined)\n\t\t\t\t\tconnectFlags |= 0x40;\n\t\t\t\tbyteStream[pos++] = connectFlags;\n\t\t\t\tpos = writeUint16 (this.keepAliveInterval, byteStream, pos);\n\t\t\t}\n\n\t\t\t// Output the messageIdentifier - if there is one\n\t\t\tif (this.messageIdentifier !== undefined)\n\t\t\t\tpos = writeUint16 (this.messageIdentifier, byteStream, pos);\n\n\t\t\tswitch(this.type) {\n\t\t\tcase MESSAGE_TYPE.CONNECT:\n\t\t\t\tpos = writeString(this.clientId, UTF8Length(this.clientId), byteStream, pos);\n\t\t\t\tif (this.willMessage !== undefined) {\n\t\t\t\t\tpos = writeString(this.willMessage.destinationName, UTF8Length(this.willMessage.destinationName), byteStream, pos);\n\t\t\t\t\tpos = writeUint16(willMessagePayloadBytes.byteLength, byteStream, pos);\n\t\t\t\t\tbyteStream.set(willMessagePayloadBytes, pos);\n\t\t\t\t\tpos += willMessagePayloadBytes.byteLength;\n\n\t\t\t\t}\n\t\t\t\tif (this.userName !== undefined)\n\t\t\t\t\tpos = writeString(this.userName, UTF8Length(this.userName), byteStream, pos);\n\t\t\t\tif (this.password !== undefined)\n\t\t\t\t\tpos = writeString(this.password, UTF8Length(this.password), byteStream, pos);\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\t// PUBLISH has a text or binary payload, if text do not add a 2 byte length field, just the UTF characters.\n\t\t\t\tbyteStream.set(payloadBytes, pos);\n\n\t\t\t\tbreak;\n\n\t\t\t\t//    \t    case MESSAGE_TYPE.PUBREC:\n\t\t\t\t//    \t    case MESSAGE_TYPE.PUBREL:\n\t\t\t\t//    \t    case MESSAGE_TYPE.PUBCOMP:\n\t\t\t\t//    \t    \tbreak;\n\n\t\t\tcase MESSAGE_TYPE.SUBSCRIBE:\n\t\t\t\t// SUBSCRIBE has a list of topic strings and request QoS\n\t\t\t\tfor (var i=0; i<this.topics.length; i++) {\n\t\t\t\t\tpos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\n\t\t\t\t\tbyteStream[pos++] = this.requestedQos[i];\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.UNSUBSCRIBE:\n\t\t\t\t// UNSUBSCRIBE has a list of topic strings\n\t\t\t\tfor (var i=0; i<this.topics.length; i++)\n\t\t\t\t\tpos = writeString(this.topics[i], topicStrLength[i], byteStream, pos);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t// Do nothing.\n\t\t\t}\n\n\t\t\treturn buffer;\n\t\t};\n\n\t\tfunction decodeMessage(input,pos) {\n\t\t\tvar startingPos = pos;\n\t\t\tvar first = input[pos];\n\t\t\tvar type = first >> 4;\n\t\t\tvar messageInfo = first &= 0x0f;\n\t\t\tpos += 1;\n\n\n\t\t\t// Decode the remaining length (MBI format)\n\n\t\t\tvar digit;\n\t\t\tvar remLength = 0;\n\t\t\tvar multiplier = 1;\n\t\t\tdo {\n\t\t\t\tif (pos == input.length) {\n\t\t\t\t\treturn [null,startingPos];\n\t\t\t\t}\n\t\t\t\tdigit = input[pos++];\n\t\t\t\tremLength += ((digit & 0x7F) * multiplier);\n\t\t\t\tmultiplier *= 128;\n\t\t\t} while ((digit & 0x80) !== 0);\n\n\t\t\tvar endPos = pos+remLength;\n\t\t\tif (endPos > input.length) {\n\t\t\t\treturn [null,startingPos];\n\t\t\t}\n\n\t\t\tvar wireMessage = new WireMessage(type);\n\t\t\tswitch(type) {\n\t\t\tcase MESSAGE_TYPE.CONNACK:\n\t\t\t\tvar connectAcknowledgeFlags = input[pos++];\n\t\t\t\tif (connectAcknowledgeFlags & 0x01)\n\t\t\t\t\twireMessage.sessionPresent = true;\n\t\t\t\twireMessage.returnCode = input[pos++];\n\t\t\t\tbreak;\n\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tvar qos = (messageInfo >> 1) & 0x03;\n\n\t\t\t\tvar len = readUint16(input, pos);\n\t\t\t\tpos += 2;\n\t\t\t\tvar topicName = parseUTF8(input, pos, len);\n\t\t\t\tpos += len;\n\t\t\t\t// If QoS 1 or 2 there will be a messageIdentifier\n\t\t\t\tif (qos > 0) {\n\t\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\t\tpos += 2;\n\t\t\t\t}\n\n\t\t\t\tvar message = new Message(input.subarray(pos, endPos));\n\t\t\t\tif ((messageInfo & 0x01) == 0x01)\n\t\t\t\t\tmessage.retained = true;\n\t\t\t\tif ((messageInfo & 0x08) == 0x08)\n\t\t\t\t\tmessage.duplicate =  true;\n\t\t\t\tmessage.qos = qos;\n\t\t\t\tmessage.destinationName = topicName;\n\t\t\t\twireMessage.payloadMessage = message;\n\t\t\t\tbreak;\n\n\t\t\tcase  MESSAGE_TYPE.PUBACK:\n\t\t\tcase  MESSAGE_TYPE.PUBREC:\n\t\t\tcase  MESSAGE_TYPE.PUBREL:\n\t\t\tcase  MESSAGE_TYPE.PUBCOMP:\n\t\t\tcase  MESSAGE_TYPE.UNSUBACK:\n\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\tbreak;\n\n\t\t\tcase  MESSAGE_TYPE.SUBACK:\n\t\t\t\twireMessage.messageIdentifier = readUint16(input, pos);\n\t\t\t\tpos += 2;\n\t\t\t\twireMessage.returnCode = input.subarray(pos, endPos);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn [wireMessage,endPos];\n\t\t}\n\n\t\tfunction writeUint16(input, buffer, offset) {\n\t\t\tbuffer[offset++] = input >> 8;      //MSB\n\t\t\tbuffer[offset++] = input % 256;     //LSB\n\t\t\treturn offset;\n\t\t}\n\n\t\tfunction writeString(input, utf8Length, buffer, offset) {\n\t\t\toffset = writeUint16(utf8Length, buffer, offset);\n\t\t\tstringToUTF8(input, buffer, offset);\n\t\t\treturn offset + utf8Length;\n\t\t}\n\n\t\tfunction readUint16(buffer, offset) {\n\t\t\treturn 256*buffer[offset] + buffer[offset+1];\n\t\t}\n\n\t\t/**\n\t * Encodes an MQTT Multi-Byte Integer\n\t * @private\n\t */\n\t\tfunction encodeMBI(number) {\n\t\t\tvar output = new Array(1);\n\t\t\tvar numBytes = 0;\n\n\t\t\tdo {\n\t\t\t\tvar digit = number % 128;\n\t\t\t\tnumber = number >> 7;\n\t\t\t\tif (number > 0) {\n\t\t\t\t\tdigit |= 0x80;\n\t\t\t\t}\n\t\t\t\toutput[numBytes++] = digit;\n\t\t\t} while ( (number > 0) && (numBytes<4) );\n\n\t\t\treturn output;\n\t\t}\n\n\t\t/**\n\t * Takes a String and calculates its length in bytes when encoded in UTF8.\n\t * @private\n\t */\n\t\tfunction UTF8Length(input) {\n\t\t\tvar output = 0;\n\t\t\tfor (var i = 0; i<input.length; i++)\n\t\t\t{\n\t\t\t\tvar charCode = input.charCodeAt(i);\n\t\t\t\tif (charCode > 0x7FF)\n\t\t\t\t{\n\t\t\t\t\t// Surrogate pair means its a 4 byte character\n\t\t\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF)\n\t\t\t\t\t{\n\t\t\t\t\t\ti++;\n\t\t\t\t\t\toutput++;\n\t\t\t\t\t}\n\t\t\t\t\toutput +=3;\n\t\t\t\t}\n\t\t\t\telse if (charCode > 0x7F)\n\t\t\t\t\toutput +=2;\n\t\t\t\telse\n\t\t\t\t\toutput++;\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\n\t\t/**\n\t * Takes a String and writes it into an array as UTF8 encoded bytes.\n\t * @private\n\t */\n\t\tfunction stringToUTF8(input, output, start) {\n\t\t\tvar pos = start;\n\t\t\tfor (var i = 0; i<input.length; i++) {\n\t\t\t\tvar charCode = input.charCodeAt(i);\n\n\t\t\t\t// Check for a surrogate pair.\n\t\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF) {\n\t\t\t\t\tvar lowCharCode = input.charCodeAt(++i);\n\t\t\t\t\tif (isNaN(lowCharCode)) {\n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UNICODE, [charCode, lowCharCode]));\n\t\t\t\t\t}\n\t\t\t\t\tcharCode = ((charCode - 0xD800)<<10) + (lowCharCode - 0xDC00) + 0x10000;\n\n\t\t\t\t}\n\n\t\t\t\tif (charCode <= 0x7F) {\n\t\t\t\t\toutput[pos++] = charCode;\n\t\t\t\t} else if (charCode <= 0x7FF) {\n\t\t\t\t\toutput[pos++] = charCode>>6  & 0x1F | 0xC0;\n\t\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t\t} else if (charCode <= 0xFFFF) {\n\t\t\t\t\toutput[pos++] = charCode>>12 & 0x0F | 0xE0;\n\t\t\t\t\toutput[pos++] = charCode>>6  & 0x3F | 0x80;\n\t\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t\t} else {\n\t\t\t\t\toutput[pos++] = charCode>>18 & 0x07 | 0xF0;\n\t\t\t\t\toutput[pos++] = charCode>>12 & 0x3F | 0x80;\n\t\t\t\t\toutput[pos++] = charCode>>6  & 0x3F | 0x80;\n\t\t\t\t\toutput[pos++] = charCode     & 0x3F | 0x80;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\n\t\tfunction parseUTF8(input, offset, length) {\n\t\t\tvar output = \"\";\n\t\t\tvar utf16;\n\t\t\tvar pos = offset;\n\n\t\t\twhile (pos < offset+length)\n\t\t\t{\n\t\t\t\tvar byte1 = input[pos++];\n\t\t\t\tif (byte1 < 128)\n\t\t\t\t\tutf16 = byte1;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar byte2 = input[pos++]-128;\n\t\t\t\t\tif (byte2 < 0)\n\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16),\"\"]));\n\t\t\t\t\tif (byte1 < 0xE0)             // 2 byte character\n\t\t\t\t\t\tutf16 = 64*(byte1-0xC0) + byte2;\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar byte3 = input[pos++]-128;\n\t\t\t\t\t\tif (byte3 < 0)\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16)]));\n\t\t\t\t\t\tif (byte1 < 0xF0)        // 3 byte character\n\t\t\t\t\t\t\tutf16 = 4096*(byte1-0xE0) + 64*byte2 + byte3;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar byte4 = input[pos++]-128;\n\t\t\t\t\t\t\tif (byte4 < 0)\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n\t\t\t\t\t\t\tif (byte1 < 0xF8)        // 4 byte character\n\t\t\t\t\t\t\t\tutf16 = 262144*(byte1-0xF0) + 4096*byte2 + 64*byte3 + byte4;\n\t\t\t\t\t\t\telse                     // longer encodings are not supported\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.MALFORMED_UTF, [byte1.toString(16), byte2.toString(16), byte3.toString(16), byte4.toString(16)]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (utf16 > 0xFFFF)   // 4 byte character - express as a surrogate pair\n\t\t\t\t{\n\t\t\t\t\tutf16 -= 0x10000;\n\t\t\t\t\toutput += String.fromCharCode(0xD800 + (utf16 >> 10)); // lead character\n\t\t\t\t\tutf16 = 0xDC00 + (utf16 & 0x3FF);  // trail character\n\t\t\t\t}\n\t\t\t\toutput += String.fromCharCode(utf16);\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\n\t\t/**\n\t * Repeat keepalive requests, monitor responses.\n\t * @ignore\n\t */\n\t\tvar Pinger = function(client, keepAliveInterval) {\n\t\t\tthis._client = client;\n\t\t\tthis._keepAliveInterval = keepAliveInterval*1000;\n\t\t\tthis.isReset = false;\n\n\t\t\tvar pingReq = new WireMessage(MESSAGE_TYPE.PINGREQ).encode();\n\n\t\t\tvar doTimeout = function (pinger) {\n\t\t\t\treturn function () {\n\t\t\t\t\treturn doPing.apply(pinger);\n\t\t\t\t};\n\t\t\t};\n\n\t\t\t/** @ignore */\n\t\t\tvar doPing = function() {\n\t\t\t\tif (!this.isReset) {\n\t\t\t\t\tthis._client._trace(\"Pinger.doPing\", \"Timed out\");\n\t\t\t\t\tthis._client._disconnected( ERROR.PING_TIMEOUT.code , format(ERROR.PING_TIMEOUT));\n\t\t\t\t} else {\n\t\t\t\t\tthis.isReset = false;\n\t\t\t\t\tthis._client._trace(\"Pinger.doPing\", \"send PINGREQ\");\n\t\t\t\t\tthis._client.socket.send(pingReq);\n\t\t\t\t\tthis.timeout = setTimeout(doTimeout(this), this._keepAliveInterval);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.reset = function() {\n\t\t\t\tthis.isReset = true;\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\tif (this._keepAliveInterval > 0)\n\t\t\t\t\tthis.timeout = setTimeout(doTimeout(this), this._keepAliveInterval);\n\t\t\t};\n\n\t\t\tthis.cancel = function() {\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t};\n\t\t};\n\n\t\t/**\n\t * Monitor request completion.\n\t * @ignore\n\t */\n\t\tvar Timeout = function(client, timeoutSeconds, action, args) {\n\t\t\tif (!timeoutSeconds)\n\t\t\t\ttimeoutSeconds = 30;\n\n\t\t\tvar doTimeout = function (action, client, args) {\n\t\t\t\treturn function () {\n\t\t\t\t\treturn action.apply(client, args);\n\t\t\t\t};\n\t\t\t};\n\t\t\tthis.timeout = setTimeout(doTimeout(action, client, args), timeoutSeconds * 1000);\n\n\t\t\tthis.cancel = function() {\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t};\n\t\t};\n\n\t/**\n\t * Internal implementation of the Websockets MQTT V3.1 client.\n\t *\n\t * @name Paho.ClientImpl @constructor\n\t * @param {String} host the DNS nameof the webSocket host.\n\t * @param {Number} port the port number for that host.\n\t * @param {String} clientId the MQ client identifier.\n\t */\n\t\tvar ClientImpl = function (uri, host, port, path, clientId) {\n\t\t// Check dependencies are satisfied in this browser.\n\t\t\tif (!(\"WebSocket\" in global && global.WebSocket !== null)) {\n\t\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"WebSocket\"]));\n\t\t\t}\n\t\t\tif (!(\"ArrayBuffer\" in global && global.ArrayBuffer !== null)) {\n\t\t\t\tthrow new Error(format(ERROR.UNSUPPORTED, [\"ArrayBuffer\"]));\n\t\t\t}\n\t\t\tthis._trace(\"Paho.Client\", uri, host, port, path, clientId);\n\n\t\t\tthis.host = host;\n\t\t\tthis.port = port;\n\t\t\tthis.path = path;\n\t\t\tthis.uri = uri;\n\t\t\tthis.clientId = clientId;\n\t\t\tthis._wsuri = null;\n\n\t\t\t// Local storagekeys are qualified with the following string.\n\t\t\t// The conditional inclusion of path in the key is for backward\n\t\t\t// compatibility to when the path was not configurable and assumed to\n\t\t\t// be /mqtt\n\t\t\tthis._localKey=host+\":\"+port+(path!=\"/mqtt\"?\":\"+path:\"\")+\":\"+clientId+\":\";\n\n\t\t\t// Create private instance-only message queue\n\t\t\t// Internal queue of messages to be sent, in sending order.\n\t\t\tthis._msg_queue = [];\n\t\t\tthis._buffered_msg_queue = [];\n\n\t\t\t// Messages we have sent and are expecting a response for, indexed by their respective message ids.\n\t\t\tthis._sentMessages = {};\n\n\t\t\t// Messages we have received and acknowleged and are expecting a confirm message for\n\t\t\t// indexed by their respective message ids.\n\t\t\tthis._receivedMessages = {};\n\n\t\t\t// Internal list of callbacks to be executed when messages\n\t\t\t// have been successfully sent over web socket, e.g. disconnect\n\t\t\t// when it doesn't have to wait for ACK, just message is dispatched.\n\t\t\tthis._notify_msg_sent = {};\n\n\t\t\t// Unique identifier for SEND messages, incrementing\n\t\t\t// counter as messages are sent.\n\t\t\tthis._message_identifier = 1;\n\n\t\t\t// Used to determine the transmission sequence of stored sent messages.\n\t\t\tthis._sequence = 0;\n\n\n\t\t\t// Load the local state, if any, from the saved version, only restore state relevant to this client.\n\t\t\tfor (var key in localStorage)\n\t\t\t\tif (   key.indexOf(\"Sent:\"+this._localKey) === 0 || key.indexOf(\"Received:\"+this._localKey) === 0)\n\t\t\t\t\tthis.restore(key);\n\t\t};\n\n\t\t// Messaging Client public instance members.\n\t\tClientImpl.prototype.host = null;\n\t\tClientImpl.prototype.port = null;\n\t\tClientImpl.prototype.path = null;\n\t\tClientImpl.prototype.uri = null;\n\t\tClientImpl.prototype.clientId = null;\n\n\t\t// Messaging Client private instance members.\n\t\tClientImpl.prototype.socket = null;\n\t\t/* true once we have received an acknowledgement to a CONNECT packet. */\n\t\tClientImpl.prototype.connected = false;\n\t\t/* The largest message identifier allowed, may not be larger than 2**16 but\n\t\t * if set smaller reduces the maximum number of outbound messages allowed.\n\t\t */\n\t\tClientImpl.prototype.maxMessageIdentifier = 65536;\n\t\tClientImpl.prototype.connectOptions = null;\n\t\tClientImpl.prototype.hostIndex = null;\n\t\tClientImpl.prototype.onConnected = null;\n\t\tClientImpl.prototype.onConnectionLost = null;\n\t\tClientImpl.prototype.onMessageDelivered = null;\n\t\tClientImpl.prototype.onMessageArrived = null;\n\t\tClientImpl.prototype.traceFunction = null;\n\t\tClientImpl.prototype._msg_queue = null;\n\t\tClientImpl.prototype._buffered_msg_queue = null;\n\t\tClientImpl.prototype._connectTimeout = null;\n\t\t/* The sendPinger monitors how long we allow before we send data to prove to the server that we are alive. */\n\t\tClientImpl.prototype.sendPinger = null;\n\t\t/* The receivePinger monitors how long we allow before we require evidence that the server is alive. */\n\t\tClientImpl.prototype.receivePinger = null;\n\t\tClientImpl.prototype._reconnectInterval = 1; // Reconnect Delay, starts at 1 second\n\t\tClientImpl.prototype._reconnecting = false;\n\t\tClientImpl.prototype._reconnectTimeout = null;\n\t\tClientImpl.prototype.disconnectedPublishing = false;\n\t\tClientImpl.prototype.disconnectedBufferSize = 5000;\n\n\t\tClientImpl.prototype.receiveBuffer = null;\n\n\t\tClientImpl.prototype._traceBuffer = null;\n\t\tClientImpl.prototype._MAX_TRACE_ENTRIES = 100;\n\n\t\tClientImpl.prototype.connect = function (connectOptions) {\n\t\t\tvar connectOptionsMasked = this._traceMask(connectOptions, \"password\");\n\t\t\tthis._trace(\"Client.connect\", connectOptionsMasked, this.socket, this.connected);\n\n\t\t\tif (this.connected)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\n\t\t\tif (this.socket)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"already connected\"]));\n\n\t\t\tif (this._reconnecting) {\n\t\t\t// connect() function is called while reconnect is in progress.\n\t\t\t// Terminate the auto reconnect process to use new connect options.\n\t\t\t\tthis._reconnectTimeout.cancel();\n\t\t\t\tthis._reconnectTimeout = null;\n\t\t\t\tthis._reconnecting = false;\n\t\t\t}\n\n\t\t\tthis.connectOptions = connectOptions;\n\t\t\tthis._reconnectInterval = 1;\n\t\t\tthis._reconnecting = false;\n\t\t\tif (connectOptions.uris) {\n\t\t\t\tthis.hostIndex = 0;\n\t\t\t\tthis._doConnect(connectOptions.uris[0]);\n\t\t\t} else {\n\t\t\t\tthis._doConnect(this.uri);\n\t\t\t}\n\n\t\t};\n\n\t\tClientImpl.prototype.subscribe = function (filter, subscribeOptions) {\n\t\t\tthis._trace(\"Client.subscribe\", filter, subscribeOptions);\n\n\t\t\tif (!this.connected)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\n            var wireMessage = new WireMessage(MESSAGE_TYPE.SUBSCRIBE);\n            wireMessage.topics = filter.constructor === Array ? filter : [filter];\n            if (subscribeOptions.qos === undefined)\n                subscribeOptions.qos = 0;\n            wireMessage.requestedQos = [];\n            for (var i = 0; i < wireMessage.topics.length; i++)\n                wireMessage.requestedQos[i] = subscribeOptions.qos;\n\n\t\t\tif (subscribeOptions.onSuccess) {\n\t\t\t\twireMessage.onSuccess = function(grantedQos) {subscribeOptions.onSuccess({invocationContext:subscribeOptions.invocationContext,grantedQos:grantedQos});};\n\t\t\t}\n\n\t\t\tif (subscribeOptions.onFailure) {\n\t\t\t\twireMessage.onFailure = function(errorCode) {subscribeOptions.onFailure({invocationContext:subscribeOptions.invocationContext,errorCode:errorCode, errorMessage:format(errorCode)});};\n\t\t\t}\n\n\t\t\tif (subscribeOptions.timeout) {\n\t\t\t\twireMessage.timeOut = new Timeout(this, subscribeOptions.timeout, subscribeOptions.onFailure,\n\t\t\t\t\t[{invocationContext:subscribeOptions.invocationContext,\n\t\t\t\t\t\terrorCode:ERROR.SUBSCRIBE_TIMEOUT.code,\n\t\t\t\t\t\terrorMessage:format(ERROR.SUBSCRIBE_TIMEOUT)}]);\n\t\t\t}\n\n\t\t\t// All subscriptions return a SUBACK.\n\t\t\tthis._requires_ack(wireMessage);\n\t\t\tthis._schedule_message(wireMessage);\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype.unsubscribe = function(filter, unsubscribeOptions) {\n\t\t\tthis._trace(\"Client.unsubscribe\", filter, unsubscribeOptions);\n\n\t\t\tif (!this.connected)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\n            var wireMessage = new WireMessage(MESSAGE_TYPE.UNSUBSCRIBE);\n            wireMessage.topics = filter.constructor === Array ? filter : [filter];\n\n\t\t\tif (unsubscribeOptions.onSuccess) {\n\t\t\t\twireMessage.callback = function() {unsubscribeOptions.onSuccess({invocationContext:unsubscribeOptions.invocationContext});};\n\t\t\t}\n\t\t\tif (unsubscribeOptions.timeout) {\n\t\t\t\twireMessage.timeOut = new Timeout(this, unsubscribeOptions.timeout, unsubscribeOptions.onFailure,\n\t\t\t\t\t[{invocationContext:unsubscribeOptions.invocationContext,\n\t\t\t\t\t\terrorCode:ERROR.UNSUBSCRIBE_TIMEOUT.code,\n\t\t\t\t\t\terrorMessage:format(ERROR.UNSUBSCRIBE_TIMEOUT)}]);\n\t\t\t}\n\n\t\t\t// All unsubscribes return a SUBACK.\n\t\t\tthis._requires_ack(wireMessage);\n\t\t\tthis._schedule_message(wireMessage);\n\t\t};\n\n\t\tClientImpl.prototype.send = function (message) {\n\t\t\tthis._trace(\"Client.send\", message);\n\n\t\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.PUBLISH);\n\t\t\twireMessage.payloadMessage = message;\n\n\t\t\tif (this.connected) {\n\t\t\t// Mark qos 1 & 2 message as \"ACK required\"\n\t\t\t// For qos 0 message, invoke onMessageDelivered callback if there is one.\n\t\t\t// Then schedule the message.\n\t\t\t\tif (message.qos > 0) {\n\t\t\t\t\tthis._requires_ack(wireMessage);\n\t\t\t\t} else if (this.onMessageDelivered) {\n\t\t\t\t\tthis._notify_msg_sent[wireMessage] = this.onMessageDelivered(wireMessage.payloadMessage);\n\t\t\t\t}\n\t\t\t\tthis._schedule_message(wireMessage);\n\t\t\t} else {\n\t\t\t// Currently disconnected, will not schedule this message\n\t\t\t// Check if reconnecting is in progress and disconnected publish is enabled.\n\t\t\t\tif (this._reconnecting && this.disconnectedPublishing) {\n\t\t\t\t// Check the limit which include the \"required ACK\" messages\n\t\t\t\t\tvar messageCount = Object.keys(this._sentMessages).length + this._buffered_msg_queue.length;\n\t\t\t\t\tif (messageCount > this.disconnectedBufferSize) {\n\t\t\t\t\t\tthrow new Error(format(ERROR.BUFFER_FULL, [this.disconnectedBufferSize]));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (message.qos > 0) {\n\t\t\t\t\t\t// Mark this message as \"ACK required\"\n\t\t\t\t\t\t\tthis._requires_ack(wireMessage);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twireMessage.sequence = ++this._sequence;\n\t\t\t\t\t\t\t// Add messages in fifo order to array, by adding to start\n\t\t\t\t\t\t\tthis._buffered_msg_queue.unshift(wireMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connected\"]));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype.disconnect = function () {\n\t\t\tthis._trace(\"Client.disconnect\");\n\n\t\t\tif (this._reconnecting) {\n\t\t\t// disconnect() function is called while reconnect is in progress.\n\t\t\t// Terminate the auto reconnect process.\n\t\t\t\tthis._reconnectTimeout.cancel();\n\t\t\t\tthis._reconnectTimeout = null;\n\t\t\t\tthis._reconnecting = false;\n\t\t\t}\n\n\t\t\tif (!this.socket)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_STATE, [\"not connecting or connected\"]));\n\n\t\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.DISCONNECT);\n\n\t\t\t// Run the disconnected call back as soon as the message has been sent,\n\t\t\t// in case of a failure later on in the disconnect processing.\n\t\t\t// as a consequence, the _disconected call back may be run several times.\n\t\t\tthis._notify_msg_sent[wireMessage] = scope(this._disconnected, this);\n\n\t\t\tthis._schedule_message(wireMessage);\n\t\t};\n\n\t\tClientImpl.prototype.getTraceLog = function () {\n\t\t\tif ( this._traceBuffer !== null ) {\n\t\t\t\tthis._trace(\"Client.getTraceLog\", new Date());\n\t\t\t\tthis._trace(\"Client.getTraceLog in flight messages\", this._sentMessages.length);\n\t\t\t\tfor (var key in this._sentMessages)\n\t\t\t\t\tthis._trace(\"_sentMessages \",key, this._sentMessages[key]);\n\t\t\t\tfor (var key in this._receivedMessages)\n\t\t\t\t\tthis._trace(\"_receivedMessages \",key, this._receivedMessages[key]);\n\n\t\t\t\treturn this._traceBuffer;\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype.startTrace = function () {\n\t\t\tif ( this._traceBuffer === null ) {\n\t\t\t\tthis._traceBuffer = [];\n\t\t\t}\n\t\t\tthis._trace(\"Client.startTrace\", new Date(), version);\n\t\t};\n\n\t\tClientImpl.prototype.stopTrace = function () {\n\t\t\tdelete this._traceBuffer;\n\t\t};\n\n\t\tClientImpl.prototype._doConnect = function (wsurl) {\n\t\t// When the socket is open, this client will send the CONNECT WireMessage using the saved parameters.\n\t\t\tif (this.connectOptions.useSSL) {\n\t\t\t\tvar uriParts = wsurl.split(\":\");\n\t\t\t\turiParts[0] = \"wss\";\n\t\t\t\twsurl = uriParts.join(\":\");\n\t\t\t}\n\t\t\tthis._wsuri = wsurl;\n\t\t\tthis.connected = false;\n\n\n\n\t\t\tif (this.connectOptions.mqttVersion < 4) {\n\t\t\t\tthis.socket = new WebSocket(wsurl, [\"mqttv3.1\"]);\n\t\t\t} else {\n\t\t\t\tthis.socket = new WebSocket(wsurl, [\"mqtt\"]);\n\t\t\t}\n\t\t\tthis.socket.binaryType = \"arraybuffer\";\n\t\t\tthis.socket.onopen = scope(this._on_socket_open, this);\n\t\t\tthis.socket.onmessage = scope(this._on_socket_message, this);\n\t\t\tthis.socket.onerror = scope(this._on_socket_error, this);\n\t\t\tthis.socket.onclose = scope(this._on_socket_close, this);\n\n\t\t\tthis.sendPinger = new Pinger(this, this.connectOptions.keepAliveInterval);\n\t\t\tthis.receivePinger = new Pinger(this, this.connectOptions.keepAliveInterval);\n\t\t\tif (this._connectTimeout) {\n\t\t\t\tthis._connectTimeout.cancel();\n\t\t\t\tthis._connectTimeout = null;\n\t\t\t}\n\t\t\tthis._connectTimeout = new Timeout(this, this.connectOptions.timeout, this._disconnected,  [ERROR.CONNECT_TIMEOUT.code, format(ERROR.CONNECT_TIMEOUT)]);\n\t\t};\n\n\n\t\t// Schedule a new message to be sent over the WebSockets\n\t\t// connection. CONNECT messages cause WebSocket connection\n\t\t// to be started. All other messages are queued internally\n\t\t// until this has happened. When WS connection starts, process\n\t\t// all outstanding messages.\n\t\tClientImpl.prototype._schedule_message = function (message) {\n\t\t\t// Add messages in fifo order to array, by adding to start\n\t\t\tthis._msg_queue.unshift(message);\n\t\t\t// Process outstanding messages in the queue if we have an  open socket, and have received CONNACK.\n\t\t\tif (this.connected) {\n\t\t\t\tthis._process_queue();\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype.store = function(prefix, wireMessage) {\n\t\t\tvar storedMessage = {type:wireMessage.type, messageIdentifier:wireMessage.messageIdentifier, version:1};\n\n\t\t\tswitch(wireMessage.type) {\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\tif(wireMessage.pubRecReceived)\n\t\t\t\t\tstoredMessage.pubRecReceived = true;\n\n\t\t\t\t// Convert the payload to a hex string.\n\t\t\t\tstoredMessage.payloadMessage = {};\n\t\t\t\tvar hex = \"\";\n\t\t\t\tvar messageBytes = wireMessage.payloadMessage.payloadBytes;\n\t\t\t\tfor (var i=0; i<messageBytes.length; i++) {\n\t\t\t\t\tif (messageBytes[i] <= 0xF)\n\t\t\t\t\t\thex = hex+\"0\"+messageBytes[i].toString(16);\n\t\t\t\t\telse\n\t\t\t\t\t\thex = hex+messageBytes[i].toString(16);\n\t\t\t\t}\n\t\t\t\tstoredMessage.payloadMessage.payloadHex = hex;\n\n\t\t\t\tstoredMessage.payloadMessage.qos = wireMessage.payloadMessage.qos;\n\t\t\t\tstoredMessage.payloadMessage.destinationName = wireMessage.payloadMessage.destinationName;\n\t\t\t\tif (wireMessage.payloadMessage.duplicate)\n\t\t\t\t\tstoredMessage.payloadMessage.duplicate = true;\n\t\t\t\tif (wireMessage.payloadMessage.retained)\n\t\t\t\t\tstoredMessage.payloadMessage.retained = true;\n\n\t\t\t\t// Add a sequence number to sent messages.\n\t\t\t\tif ( prefix.indexOf(\"Sent:\") === 0 ) {\n\t\t\t\t\tif ( wireMessage.sequence === undefined )\n\t\t\t\t\t\twireMessage.sequence = ++this._sequence;\n\t\t\t\t\tstoredMessage.sequence = wireMessage.sequence;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow Error(format(ERROR.INVALID_STORED_DATA, [prefix+this._localKey+wireMessage.messageIdentifier, storedMessage]));\n\t\t\t}\n\t\t\tlocalStorage.setItem(prefix+this._localKey+wireMessage.messageIdentifier, JSON.stringify(storedMessage));\n\t\t};\n\n\t\tClientImpl.prototype.restore = function(key) {\n\t\t\tvar value = localStorage.getItem(key);\n\t\t\tvar storedMessage = JSON.parse(value);\n\n\t\t\tvar wireMessage = new WireMessage(storedMessage.type, storedMessage);\n\n\t\t\tswitch(storedMessage.type) {\n\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\t// Replace the payload message with a Message object.\n\t\t\t\tvar hex = storedMessage.payloadMessage.payloadHex;\n\t\t\t\tvar buffer = new ArrayBuffer((hex.length)/2);\n\t\t\t\tvar byteStream = new Uint8Array(buffer);\n\t\t\t\tvar i = 0;\n\t\t\t\twhile (hex.length >= 2) {\n\t\t\t\t\tvar x = parseInt(hex.substring(0, 2), 16);\n\t\t\t\t\thex = hex.substring(2, hex.length);\n\t\t\t\t\tbyteStream[i++] = x;\n\t\t\t\t}\n\t\t\t\tvar payloadMessage = new Message(byteStream);\n\n\t\t\t\tpayloadMessage.qos = storedMessage.payloadMessage.qos;\n\t\t\t\tpayloadMessage.destinationName = storedMessage.payloadMessage.destinationName;\n\t\t\t\tif (storedMessage.payloadMessage.duplicate)\n\t\t\t\t\tpayloadMessage.duplicate = true;\n\t\t\t\tif (storedMessage.payloadMessage.retained)\n\t\t\t\t\tpayloadMessage.retained = true;\n\t\t\t\twireMessage.payloadMessage = payloadMessage;\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow Error(format(ERROR.INVALID_STORED_DATA, [key, value]));\n\t\t\t}\n\n\t\t\tif (key.indexOf(\"Sent:\"+this._localKey) === 0) {\n\t\t\t\twireMessage.payloadMessage.duplicate = true;\n\t\t\t\tthis._sentMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\t} else if (key.indexOf(\"Received:\"+this._localKey) === 0) {\n\t\t\t\tthis._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype._process_queue = function () {\n\t\t\tvar message = null;\n\n\t\t\t// Send all queued messages down socket connection\n\t\t\twhile ((message = this._msg_queue.pop())) {\n\t\t\t\tthis._socket_send(message);\n\t\t\t\t// Notify listeners that message was successfully sent\n\t\t\t\tif (this._notify_msg_sent[message]) {\n\t\t\t\t\tthis._notify_msg_sent[message]();\n\t\t\t\t\tdelete this._notify_msg_sent[message];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Expect an ACK response for this message. Add message to the set of in progress\n\t * messages and set an unused identifier in this message.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._requires_ack = function (wireMessage) {\n\t\t\tvar messageCount = Object.keys(this._sentMessages).length;\n\t\t\tif (messageCount > this.maxMessageIdentifier)\n\t\t\t\tthrow Error (\"Too many messages:\"+messageCount);\n\n\t\t\twhile(this._sentMessages[this._message_identifier] !== undefined) {\n\t\t\t\tthis._message_identifier++;\n\t\t\t}\n\t\t\twireMessage.messageIdentifier = this._message_identifier;\n\t\t\tthis._sentMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\tif (wireMessage.type === MESSAGE_TYPE.PUBLISH) {\n\t\t\t\tthis.store(\"Sent:\", wireMessage);\n\t\t\t}\n\t\t\tif (this._message_identifier === this.maxMessageIdentifier) {\n\t\t\t\tthis._message_identifier = 1;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Called when the underlying websocket has been opened.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._on_socket_open = function () {\n\t\t// Create the CONNECT message object.\n\t\t\tvar wireMessage = new WireMessage(MESSAGE_TYPE.CONNECT, this.connectOptions);\n\t\t\twireMessage.clientId = this.clientId;\n\t\t\tthis._socket_send(wireMessage);\n\t\t};\n\n\t\t/**\n\t * Called when the underlying websocket has received a complete packet.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._on_socket_message = function (event) {\n\t\t\tthis._trace(\"Client._on_socket_message\", event.data);\n\t\t\tvar messages = this._deframeMessages(event.data);\n\t\t\tfor (var i = 0; i < messages.length; i+=1) {\n\t\t\t\tthis._handleMessage(messages[i]);\n\t\t\t}\n\t\t};\n\n\t\tClientImpl.prototype._deframeMessages = function(data) {\n\t\t\tvar byteArray = new Uint8Array(data);\n\t\t\tvar messages = [];\n\t\t\tif (this.receiveBuffer) {\n\t\t\t\tvar newData = new Uint8Array(this.receiveBuffer.length+byteArray.length);\n\t\t\t\tnewData.set(this.receiveBuffer);\n\t\t\t\tnewData.set(byteArray,this.receiveBuffer.length);\n\t\t\t\tbyteArray = newData;\n\t\t\t\tdelete this.receiveBuffer;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tvar offset = 0;\n\t\t\t\twhile(offset < byteArray.length) {\n\t\t\t\t\tvar result = decodeMessage(byteArray,offset);\n\t\t\t\t\tvar wireMessage = result[0];\n\t\t\t\t\toffset = result[1];\n\t\t\t\t\tif (wireMessage !== null) {\n\t\t\t\t\t\tmessages.push(wireMessage);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (offset < byteArray.length) {\n\t\t\t\t\tthis.receiveBuffer = byteArray.subarray(offset);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tvar errorStack = ((error.hasOwnProperty(\"stack\") == \"undefined\") ? error.stack.toString() : \"No Error Stack Available\");\n\t\t\t\tthis._disconnected(ERROR.INTERNAL_ERROR.code , format(ERROR.INTERNAL_ERROR, [error.message,errorStack]));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn messages;\n\t\t};\n\n\t\tClientImpl.prototype._handleMessage = function(wireMessage) {\n\n\t\t\tthis._trace(\"Client._handleMessage\", wireMessage);\n\n\t\t\ttry {\n\t\t\t\tswitch(wireMessage.type) {\n\t\t\t\tcase MESSAGE_TYPE.CONNACK:\n\t\t\t\t\tthis._connectTimeout.cancel();\n\t\t\t\t\tif (this._reconnectTimeout)\n\t\t\t\t\t\tthis._reconnectTimeout.cancel();\n\n\t\t\t\t\t// If we have started using clean session then clear up the local state.\n\t\t\t\t\tif (this.connectOptions.cleanSession) {\n\t\t\t\t\t\tfor (var key in this._sentMessages) {\n\t\t\t\t\t\t\tvar sentMessage = this._sentMessages[key];\n\t\t\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+sentMessage.messageIdentifier);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._sentMessages = {};\n\n\t\t\t\t\t\tfor (var key in this._receivedMessages) {\n\t\t\t\t\t\t\tvar receivedMessage = this._receivedMessages[key];\n\t\t\t\t\t\t\tlocalStorage.removeItem(\"Received:\"+this._localKey+receivedMessage.messageIdentifier);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._receivedMessages = {};\n\t\t\t\t\t}\n\t\t\t\t\t// Client connected and ready for business.\n\t\t\t\t\tif (wireMessage.returnCode === 0) {\n\n\t\t\t\t\t\tthis.connected = true;\n\t\t\t\t\t\t// Jump to the end of the list of uris and stop looking for a good host.\n\n\t\t\t\t\t\tif (this.connectOptions.uris)\n\t\t\t\t\t\t\tthis.hostIndex = this.connectOptions.uris.length;\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._disconnected(ERROR.CONNACK_RETURNCODE.code , format(ERROR.CONNACK_RETURNCODE, [wireMessage.returnCode, CONNACK_RC[wireMessage.returnCode]]));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Resend messages.\n\t\t\t\t\tvar sequencedMessages = [];\n\t\t\t\t\tfor (var msgId in this._sentMessages) {\n\t\t\t\t\t\tif (this._sentMessages.hasOwnProperty(msgId))\n\t\t\t\t\t\t\tsequencedMessages.push(this._sentMessages[msgId]);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Also schedule qos 0 buffered messages if any\n\t\t\t\t\tif (this._buffered_msg_queue.length > 0) {\n\t\t\t\t\t\tvar msg = null;\n\t\t\t\t\t\twhile ((msg = this._buffered_msg_queue.pop())) {\n\t\t\t\t\t\t\tsequencedMessages.push(msg);\n\t\t\t\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\t\t\t\tthis._notify_msg_sent[msg] = this.onMessageDelivered(msg.payloadMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Sort sentMessages into the original sent order.\n\t\t\t\t\tvar sequencedMessages = sequencedMessages.sort(function(a,b) {return a.sequence - b.sequence;} );\n\t\t\t\t\tfor (var i=0, len=sequencedMessages.length; i<len; i++) {\n\t\t\t\t\t\tvar sentMessage = sequencedMessages[i];\n\t\t\t\t\t\tif (sentMessage.type == MESSAGE_TYPE.PUBLISH && sentMessage.pubRecReceived) {\n\t\t\t\t\t\t\tvar pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {messageIdentifier:sentMessage.messageIdentifier});\n\t\t\t\t\t\t\tthis._schedule_message(pubRelMessage);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._schedule_message(sentMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Execute the connectOptions.onSuccess callback if there is one.\n\t\t\t\t\t// Will also now return if this connection was the result of an automatic\n\t\t\t\t\t// reconnect and which URI was successfully connected to.\n\t\t\t\t\tif (this.connectOptions.onSuccess) {\n\t\t\t\t\t\tthis.connectOptions.onSuccess({invocationContext:this.connectOptions.invocationContext});\n\t\t\t\t\t}\n\n\t\t\t\t\tvar reconnected = false;\n\t\t\t\t\tif (this._reconnecting) {\n\t\t\t\t\t\treconnected = true;\n\t\t\t\t\t\tthis._reconnectInterval = 1;\n\t\t\t\t\t\tthis._reconnecting = false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Execute the onConnected callback if there is one.\n\t\t\t\t\tthis._connected(reconnected, this._wsuri);\n\n\t\t\t\t\t// Process all queued messages now that the connection is established.\n\t\t\t\t\tthis._process_queue();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBLISH:\n\t\t\t\t\tthis._receivePublish(wireMessage);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBACK:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t// If this is a re flow of a PUBACK after we have restarted receivedMessage will not exist.\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\t\t\tthis.onMessageDelivered(sentMessage.payloadMessage);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBREC:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t// If this is a re flow of a PUBREC after we have restarted receivedMessage will not exist.\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tsentMessage.pubRecReceived = true;\n\t\t\t\t\t\tvar pubRelMessage = new WireMessage(MESSAGE_TYPE.PUBREL, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\t\t\tthis.store(\"Sent:\", sentMessage);\n\t\t\t\t\t\tthis._schedule_message(pubRelMessage);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBREL:\n\t\t\t\t\tvar receivedMessage = this._receivedMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tlocalStorage.removeItem(\"Received:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t\t// If this is a re flow of a PUBREL after we have restarted receivedMessage will not exist.\n\t\t\t\t\tif (receivedMessage) {\n\t\t\t\t\t\tthis._receiveMessage(receivedMessage);\n\t\t\t\t\t\tdelete this._receivedMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t}\n\t\t\t\t\t// Always flow PubComp, we may have previously flowed PubComp but the server lost it and restarted.\n\t\t\t\t\tvar pubCompMessage = new WireMessage(MESSAGE_TYPE.PUBCOMP, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\t\tthis._schedule_message(pubCompMessage);\n\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PUBCOMP:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tlocalStorage.removeItem(\"Sent:\"+this._localKey+wireMessage.messageIdentifier);\n\t\t\t\t\tif (this.onMessageDelivered)\n\t\t\t\t\t\tthis.onMessageDelivered(sentMessage.payloadMessage);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.SUBACK:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tif(sentMessage.timeOut)\n\t\t\t\t\t\t\tsentMessage.timeOut.cancel();\n\t\t\t\t\t\t// This will need to be fixed when we add multiple topic support\n\t\t\t\t\t\tif (wireMessage.returnCode[0] === 0x80) {\n\t\t\t\t\t\t\tif (sentMessage.onFailure) {\n\t\t\t\t\t\t\t\tsentMessage.onFailure(wireMessage.returnCode);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (sentMessage.onSuccess) {\n\t\t\t\t\t\t\tsentMessage.onSuccess(wireMessage.returnCode);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.UNSUBACK:\n\t\t\t\t\tvar sentMessage = this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\tif (sentMessage) {\n\t\t\t\t\t\tif (sentMessage.timeOut)\n\t\t\t\t\t\t\tsentMessage.timeOut.cancel();\n\t\t\t\t\t\tif (sentMessage.callback) {\n\t\t\t\t\t\t\tsentMessage.callback();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdelete this._sentMessages[wireMessage.messageIdentifier];\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.PINGRESP:\n\t\t\t\t/* The sendPinger or receivePinger may have sent a ping, the receivePinger has already been reset. */\n\t\t\t\t\tthis.sendPinger.reset();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MESSAGE_TYPE.DISCONNECT:\n\t\t\t\t// Clients do not expect to receive disconnect packets.\n\t\t\t\t\tthis._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code , format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthis._disconnected(ERROR.INVALID_MQTT_MESSAGE_TYPE.code , format(ERROR.INVALID_MQTT_MESSAGE_TYPE, [wireMessage.type]));\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tvar errorStack = ((error.hasOwnProperty(\"stack\") == \"undefined\") ? error.stack.toString() : \"No Error Stack Available\");\n\t\t\t\tthis._disconnected(ERROR.INTERNAL_ERROR.code , format(ERROR.INTERNAL_ERROR, [error.message,errorStack]));\n\t\t\t\treturn;\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._on_socket_error = function (error) {\n\t\t\tif (!this._reconnecting) {\n\t\t\t\tthis._disconnected(ERROR.SOCKET_ERROR.code , format(ERROR.SOCKET_ERROR, [error.data]));\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._on_socket_close = function () {\n\t\t\tif (!this._reconnecting) {\n\t\t\t\tthis._disconnected(ERROR.SOCKET_CLOSE.code , format(ERROR.SOCKET_CLOSE));\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._socket_send = function (wireMessage) {\n\n\t\t\tif (wireMessage.type == 1) {\n\t\t\t\tvar wireMessageMasked = this._traceMask(wireMessage, \"password\");\n\t\t\t\tthis._trace(\"Client._socket_send\", wireMessageMasked);\n\t\t\t}\n\t\t\telse this._trace(\"Client._socket_send\", wireMessage);\n\n\t\t\tthis.socket.send(wireMessage.encode());\n\t\t\t/* We have proved to the server we are alive. */\n\t\t\tthis.sendPinger.reset();\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._receivePublish = function (wireMessage) {\n\t\t\tswitch(wireMessage.payloadMessage.qos) {\n\t\t\tcase \"undefined\":\n\t\t\tcase 0:\n\t\t\t\tthis._receiveMessage(wireMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\t\t\t\tvar pubAckMessage = new WireMessage(MESSAGE_TYPE.PUBACK, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\tthis._schedule_message(pubAckMessage);\n\t\t\t\tthis._receiveMessage(wireMessage);\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\tthis._receivedMessages[wireMessage.messageIdentifier] = wireMessage;\n\t\t\t\tthis.store(\"Received:\", wireMessage);\n\t\t\t\tvar pubRecMessage = new WireMessage(MESSAGE_TYPE.PUBREC, {messageIdentifier:wireMessage.messageIdentifier});\n\t\t\t\tthis._schedule_message(pubRecMessage);\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow Error(\"Invaild qos=\" + wireMessage.payloadMessage.qos);\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._receiveMessage = function (wireMessage) {\n\t\t\tif (this.onMessageArrived) {\n\t\t\t\tthis.onMessageArrived(wireMessage.payloadMessage);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Client has connected.\n\t * @param {reconnect} [boolean] indicate if this was a result of reconnect operation.\n\t * @param {uri} [string] fully qualified WebSocket URI of the server.\n\t */\n\t\tClientImpl.prototype._connected = function (reconnect, uri) {\n\t\t// Execute the onConnected callback if there is one.\n\t\t\tif (this.onConnected)\n\t\t\t\tthis.onConnected(reconnect, uri);\n\t\t};\n\n\t\t/**\n\t * Attempts to reconnect the client to the server.\n   * For each reconnect attempt, will double the reconnect interval\n   * up to 128 seconds.\n\t */\n\t\tClientImpl.prototype._reconnect = function () {\n\t\t\tthis._trace(\"Client._reconnect\");\n\t\t\tif (!this.connected) {\n\t\t\t\tthis._reconnecting = true;\n\t\t\t\tthis.sendPinger.cancel();\n\t\t\t\tthis.receivePinger.cancel();\n\t\t\t\tif (this._reconnectInterval < 128)\n\t\t\t\t\tthis._reconnectInterval = this._reconnectInterval * 2;\n\t\t\t\tif (this.connectOptions.uris) {\n\t\t\t\t\tthis.hostIndex = 0;\n\t\t\t\t\tthis._doConnect(this.connectOptions.uris[0]);\n\t\t\t\t} else {\n\t\t\t\t\tthis._doConnect(this.uri);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t * Client has disconnected either at its own request or because the server\n\t * or network disconnected it. Remove all non-durable state.\n\t * @param {errorCode} [number] the error number.\n\t * @param {errorText} [string] the error text.\n\t * @ignore\n\t */\n\t\tClientImpl.prototype._disconnected = function (errorCode, errorText) {\n\t\t\tthis._trace(\"Client._disconnected\", errorCode, errorText);\n\n\t\t\tif (errorCode !== undefined && this._reconnecting) {\n\t\t\t\t//Continue automatic reconnect process\n\t\t\t\tthis._reconnectTimeout = new Timeout(this, this._reconnectInterval, this._reconnect);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.sendPinger.cancel();\n\t\t\tthis.receivePinger.cancel();\n\t\t\tif (this._connectTimeout) {\n\t\t\t\tthis._connectTimeout.cancel();\n\t\t\t\tthis._connectTimeout = null;\n\t\t\t}\n\n\t\t\t// Clear message buffers.\n\t\t\tthis._msg_queue = [];\n\t\t\tthis._buffered_msg_queue = [];\n\t\t\tthis._notify_msg_sent = {};\n\n\t\t\tif (this.socket) {\n\t\t\t// Cancel all socket callbacks so that they cannot be driven again by this socket.\n\t\t\t\tthis.socket.onopen = null;\n\t\t\t\tthis.socket.onmessage = null;\n\t\t\t\tthis.socket.onerror = null;\n\t\t\t\tthis.socket.onclose = null;\n\t\t\t\tif (this.socket.readyState === 1)\n\t\t\t\t\tthis.socket.close();\n\t\t\t\tdelete this.socket;\n\t\t\t}\n\n\t\t\tif (this.connectOptions.uris && this.hostIndex < this.connectOptions.uris.length-1) {\n\t\t\t// Try the next host.\n\t\t\t\tthis.hostIndex++;\n\t\t\t\tthis._doConnect(this.connectOptions.uris[this.hostIndex]);\n\t\t\t} else {\n\n\t\t\t\tif (errorCode === undefined) {\n\t\t\t\t\terrorCode = ERROR.OK.code;\n\t\t\t\t\terrorText = format(ERROR.OK);\n\t\t\t\t}\n\n\t\t\t\t// Run any application callbacks last as they may attempt to reconnect and hence create a new socket.\n\t\t\t\tif (this.connected) {\n\t\t\t\t\tthis.connected = false;\n\t\t\t\t\t// Execute the connectionLostCallback if there is one, and we were connected.\n\t\t\t\t\tif (this.onConnectionLost) {\n\t\t\t\t\t\tthis.onConnectionLost({errorCode:errorCode, errorMessage:errorText, reconnect:this.connectOptions.reconnect, uri:this._wsuri});\n\t\t\t\t\t}\n\t\t\t\t\tif (errorCode !== ERROR.OK.code && this.connectOptions.reconnect) {\n\t\t\t\t\t// Start automatic reconnect process for the very first time since last successful connect.\n\t\t\t\t\t\tthis._reconnectInterval = 1;\n\t\t\t\t\t\tthis._reconnect();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t// Otherwise we never had a connection, so indicate that the connect has failed.\n\t\t\t\t\tif (this.connectOptions.mqttVersion === 4 && this.connectOptions.mqttVersionExplicit === false) {\n\t\t\t\t\t\tthis._trace(\"Failed to connect V4, dropping back to V3\");\n\t\t\t\t\t\tthis.connectOptions.mqttVersion = 3;\n\t\t\t\t\t\tif (this.connectOptions.uris) {\n\t\t\t\t\t\t\tthis.hostIndex = 0;\n\t\t\t\t\t\t\tthis._doConnect(this.connectOptions.uris[0]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._doConnect(this.uri);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if(this.connectOptions.onFailure) {\n\t\t\t\t\t\tthis.connectOptions.onFailure({invocationContext:this.connectOptions.invocationContext, errorCode:errorCode, errorMessage:errorText});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._trace = function () {\n\t\t// Pass trace message back to client's callback function\n\t\t\tif (this.traceFunction) {\n\t\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\t\t\tfor (var i in args)\n\t\t\t\t{\n\t\t\t\t\tif (typeof args[i] !== \"undefined\")\n\t\t\t\t\t\targs.splice(i, 1, JSON.stringify(args[i]));\n\t\t\t\t}\n\t\t\t\tvar record = args.join(\"\");\n\t\t\t\tthis.traceFunction ({severity: \"Debug\", message: record\t});\n\t\t\t}\n\n\t\t\t//buffer style trace\n\t\t\tif ( this._traceBuffer !== null ) {\n\t\t\t\tfor (var i = 0, max = arguments.length; i < max; i++) {\n\t\t\t\t\tif ( this._traceBuffer.length == this._MAX_TRACE_ENTRIES ) {\n\t\t\t\t\t\tthis._traceBuffer.shift();\n\t\t\t\t\t}\n\t\t\t\t\tif (i === 0) this._traceBuffer.push(arguments[i]);\n\t\t\t\t\telse if (typeof arguments[i] === \"undefined\" ) this._traceBuffer.push(arguments[i]);\n\t\t\t\t\telse this._traceBuffer.push(\"  \"+JSON.stringify(arguments[i]));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/** @ignore */\n\t\tClientImpl.prototype._traceMask = function (traceObject, masked) {\n\t\t\tvar traceObjectMasked = {};\n\t\t\tfor (var attr in traceObject) {\n\t\t\t\tif (traceObject.hasOwnProperty(attr)) {\n\t\t\t\t\tif (attr == masked)\n\t\t\t\t\t\ttraceObjectMasked[attr] = \"******\";\n\t\t\t\t\telse\n\t\t\t\t\t\ttraceObjectMasked[attr] = traceObject[attr];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn traceObjectMasked;\n\t\t};\n\n\t\t// ------------------------------------------------------------------------\n\t\t// Public Programming interface.\n\t\t// ------------------------------------------------------------------------\n\n\t\t/**\n\t * The JavaScript application communicates to the server using a {@link Paho.Client} object.\n\t * <p>\n\t * Most applications will create just one Client object and then call its connect() method,\n\t * however applications can create more than one Client object if they wish.\n\t * In this case the combination of host, port and clientId attributes must be different for each Client object.\n\t * <p>\n\t * The send, subscribe and unsubscribe methods are implemented as asynchronous JavaScript methods\n\t * (even though the underlying protocol exchange might be synchronous in nature).\n\t * This means they signal their completion by calling back to the application,\n\t * via Success or Failure callback functions provided by the application on the method in question.\n\t * Such callbacks are called at most once per method invocation and do not persist beyond the lifetime\n\t * of the script that made the invocation.\n\t * <p>\n\t * In contrast there are some callback functions, most notably <i>onMessageArrived</i>,\n\t * that are defined on the {@link Paho.Client} object.\n\t * These may get called multiple times, and aren't directly related to specific method invocations made by the client.\n\t *\n\t * @name Paho.Client\n\t *\n\t * @constructor\n\t *\n\t * @param {string} host - the address of the messaging server, as a fully qualified WebSocket URI, as a DNS name or dotted decimal IP address.\n\t * @param {number} port - the port number to connect to - only required if host is not a URI\n\t * @param {string} path - the path on the host to connect to - only used if host is not a URI. Default: '/mqtt'.\n\t * @param {string} clientId - the Messaging client identifier, between 1 and 23 characters in length.\n\t *\n\t * @property {string} host - <i>read only</i> the server's DNS hostname or dotted decimal IP address.\n\t * @property {number} port - <i>read only</i> the server's port.\n\t * @property {string} path - <i>read only</i> the server's path.\n\t * @property {string} clientId - <i>read only</i> used when connecting to the server.\n\t * @property {function} onConnectionLost - called when a connection has been lost.\n\t *                            after a connect() method has succeeded.\n\t *                            Establish the call back used when a connection has been lost. The connection may be\n\t *                            lost because the client initiates a disconnect or because the server or network\n\t *                            cause the client to be disconnected. The disconnect call back may be called without\n\t *                            the connectionComplete call back being invoked if, for example the client fails to\n\t *                            connect.\n\t *                            A single response object parameter is passed to the onConnectionLost callback containing the following fields:\n\t *                            <ol>\n\t *                            <li>errorCode\n\t *                            <li>errorMessage\n\t *                            </ol>\n\t * @property {function} onMessageDelivered - called when a message has been delivered.\n\t *                            All processing that this Client will ever do has been completed. So, for example,\n\t *                            in the case of a Qos=2 message sent by this client, the PubComp flow has been received from the server\n\t *                            and the message has been removed from persistent storage before this callback is invoked.\n\t *                            Parameters passed to the onMessageDelivered callback are:\n\t *                            <ol>\n\t *                            <li>{@link Paho.Message} that was delivered.\n\t *                            </ol>\n\t * @property {function} onMessageArrived - called when a message has arrived in this Paho.client.\n\t *                            Parameters passed to the onMessageArrived callback are:\n\t *                            <ol>\n\t *                            <li>{@link Paho.Message} that has arrived.\n\t *                            </ol>\n\t * @property {function} onConnected - called when a connection is successfully made to the server.\n\t *                                  after a connect() method.\n\t *                                  Parameters passed to the onConnected callback are:\n\t *                                  <ol>\n\t *                                  <li>reconnect (boolean) - If true, the connection was the result of a reconnect.</li>\n\t *                                  <li>URI (string) - The URI used to connect to the server.</li>\n\t *                                  </ol>\n\t * @property {boolean} disconnectedPublishing - if set, will enable disconnected publishing in\n\t *                                            in the event that the connection to the server is lost.\n\t * @property {number} disconnectedBufferSize - Used to set the maximum number of messages that the disconnected\n\t *                                             buffer will hold before rejecting new messages. Default size: 5000 messages\n\t * @property {function} trace - called whenever trace is called. TODO\n\t */\n\t\tvar Client = function (host, port, path, clientId) {\n\n\t\t\tvar uri;\n\n\t\t\tif (typeof host !== \"string\")\n\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof host, \"host\"]));\n\n\t\t\tif (arguments.length == 2) {\n\t\t\t// host: must be full ws:// uri\n\t\t\t// port: clientId\n\t\t\t\tclientId = port;\n\t\t\t\turi = host;\n\t\t\t\tvar match = uri.match(/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/);\n\t\t\t\tif (match) {\n\t\t\t\t\thost = match[4]||match[2];\n\t\t\t\t\tport = parseInt(match[7]);\n\t\t\t\t\tpath = match[8];\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT,[host,\"host\"]));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (arguments.length == 3) {\n\t\t\t\t\tclientId = path;\n\t\t\t\t\tpath = \"/mqtt\";\n\t\t\t\t}\n\t\t\t\tif (typeof port !== \"number\" || port < 0)\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof port, \"port\"]));\n\t\t\t\tif (typeof path !== \"string\")\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof path, \"path\"]));\n\n\t\t\t\tvar ipv6AddSBracket = (host.indexOf(\":\") !== -1 && host.slice(0,1) !== \"[\" && host.slice(-1) !== \"]\");\n\t\t\t\turi = \"ws://\"+(ipv6AddSBracket?\"[\"+host+\"]\":host)+\":\"+port+path;\n\t\t\t}\n\n\t\t\tvar clientIdLength = 0;\n\t\t\tfor (var i = 0; i<clientId.length; i++) {\n\t\t\t\tvar charCode = clientId.charCodeAt(i);\n\t\t\t\tif (0xD800 <= charCode && charCode <= 0xDBFF)  {\n\t\t\t\t\ti++; // Surrogate pair.\n\t\t\t\t}\n\t\t\t\tclientIdLength++;\n\t\t\t}\n\t\t\tif (typeof clientId !== \"string\" || clientIdLength > 65535)\n\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [clientId, \"clientId\"]));\n\n\t\t\tvar client = new ClientImpl(uri, host, port, path, clientId);\n\n\t\t\t//Public Properties\n\t\t\tObject.defineProperties(this,{\n\t\t\t\t\"host\":{\n\t\t\t\t\tget: function() { return host; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"port\":{\n\t\t\t\t\tget: function() { return port; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"path\":{\n\t\t\t\t\tget: function() { return path; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"uri\":{\n\t\t\t\t\tget: function() { return uri; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"clientId\":{\n\t\t\t\t\tget: function() { return client.clientId; },\n\t\t\t\t\tset: function() { throw new Error(format(ERROR.UNSUPPORTED_OPERATION)); }\n\t\t\t\t},\n\t\t\t\t\"onConnected\":{\n\t\t\t\t\tget: function() { return client.onConnected; },\n\t\t\t\t\tset: function(newOnConnected) {\n\t\t\t\t\t\tif (typeof newOnConnected === \"function\")\n\t\t\t\t\t\t\tclient.onConnected = newOnConnected;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnConnected, \"onConnected\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"disconnectedPublishing\":{\n\t\t\t\t\tget: function() { return client.disconnectedPublishing; },\n\t\t\t\t\tset: function(newDisconnectedPublishing) {\n\t\t\t\t\t\tclient.disconnectedPublishing = newDisconnectedPublishing;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"disconnectedBufferSize\":{\n\t\t\t\t\tget: function() { return client.disconnectedBufferSize; },\n\t\t\t\t\tset: function(newDisconnectedBufferSize) {\n\t\t\t\t\t\tclient.disconnectedBufferSize = newDisconnectedBufferSize;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"onConnectionLost\":{\n\t\t\t\t\tget: function() { return client.onConnectionLost; },\n\t\t\t\t\tset: function(newOnConnectionLost) {\n\t\t\t\t\t\tif (typeof newOnConnectionLost === \"function\")\n\t\t\t\t\t\t\tclient.onConnectionLost = newOnConnectionLost;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnConnectionLost, \"onConnectionLost\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"onMessageDelivered\":{\n\t\t\t\t\tget: function() { return client.onMessageDelivered; },\n\t\t\t\t\tset: function(newOnMessageDelivered) {\n\t\t\t\t\t\tif (typeof newOnMessageDelivered === \"function\")\n\t\t\t\t\t\t\tclient.onMessageDelivered = newOnMessageDelivered;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageDelivered, \"onMessageDelivered\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"onMessageArrived\":{\n\t\t\t\t\tget: function() { return client.onMessageArrived; },\n\t\t\t\t\tset: function(newOnMessageArrived) {\n\t\t\t\t\t\tif (typeof newOnMessageArrived === \"function\")\n\t\t\t\t\t\t\tclient.onMessageArrived = newOnMessageArrived;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof newOnMessageArrived, \"onMessageArrived\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"trace\":{\n\t\t\t\t\tget: function() { return client.traceFunction; },\n\t\t\t\t\tset: function(trace) {\n\t\t\t\t\t\tif(typeof trace === \"function\"){\n\t\t\t\t\t\t\tclient.traceFunction = trace;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof trace, \"onTrace\"]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\n\t\t\t/**\n\t\t * Connect this Messaging client to its server.\n\t\t *\n\t\t * @name Paho.Client#connect\n\t\t * @function\n\t\t * @param {object} connectOptions - Attributes used with the connection.\n\t\t * @param {number} connectOptions.timeout - If the connect has not succeeded within this\n\t\t *                    number of seconds, it is deemed to have failed.\n\t\t *                    The default is 30 seconds.\n\t\t * @param {string} connectOptions.userName - Authentication username for this connection.\n\t\t * @param {string} connectOptions.password - Authentication password for this connection.\n\t\t * @param {Paho.Message} connectOptions.willMessage - sent by the server when the client\n\t\t *                    disconnects abnormally.\n\t\t * @param {number} connectOptions.keepAliveInterval - the server disconnects this client if\n\t\t *                    there is no activity for this number of seconds.\n\t\t *                    The default value of 60 seconds is assumed if not set.\n\t\t * @param {boolean} connectOptions.cleanSession - if true(default) the client and server\n\t\t *                    persistent state is deleted on successful connect.\n\t\t * @param {boolean} connectOptions.useSSL - if present and true, use an SSL Websocket connection.\n\t\t * @param {object} connectOptions.invocationContext - passed to the onSuccess callback or onFailure callback.\n\t\t * @param {function} connectOptions.onSuccess - called when the connect acknowledgement\n\t\t *                    has been received from the server.\n\t\t * A single response object parameter is passed to the onSuccess callback containing the following fields:\n\t\t * <ol>\n\t\t * <li>invocationContext as passed in to the onSuccess method in the connectOptions.\n\t\t * </ol>\n\t * @param {function} connectOptions.onFailure - called when the connect request has failed or timed out.\n\t\t * A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t * <ol>\n\t\t * <li>invocationContext as passed in to the onFailure method in the connectOptions.\n\t\t * <li>errorCode a number indicating the nature of the error.\n\t\t * <li>errorMessage text describing the error.\n\t\t * </ol>\n\t * @param {array} connectOptions.hosts - If present this contains either a set of hostnames or fully qualified\n\t\t * WebSocket URIs (ws://iot.eclipse.org:80/ws), that are tried in order in place\n\t\t * of the host and port paramater on the construtor. The hosts are tried one at at time in order until\n\t\t * one of then succeeds.\n\t * @param {array} connectOptions.ports - If present the set of ports matching the hosts. If hosts contains URIs, this property\n\t\t * is not used.\n\t * @param {boolean} connectOptions.reconnect - Sets whether the client will automatically attempt to reconnect\n\t * to the server if the connection is lost.\n\t *<ul>\n\t *<li>If set to false, the client will not attempt to automatically reconnect to the server in the event that the\n\t * connection is lost.</li>\n\t *<li>If set to true, in the event that the connection is lost, the client will attempt to reconnect to the server.\n\t * It will initially wait 1 second before it attempts to reconnect, for every failed reconnect attempt, the delay\n\t * will double until it is at 2 minutes at which point the delay will stay at 2 minutes.</li>\n\t *</ul>\n\t * @param {number} connectOptions.mqttVersion - The version of MQTT to use to connect to the MQTT Broker.\n\t *<ul>\n\t *<li>3 - MQTT V3.1</li>\n\t *<li>4 - MQTT V3.1.1</li>\n\t *</ul>\n\t * @param {boolean} connectOptions.mqttVersionExplicit - If set to true, will force the connection to use the\n\t * selected MQTT Version or will fail to connect.\n\t * @param {array} connectOptions.uris - If present, should contain a list of fully qualified WebSocket uris\n\t * (e.g. ws://iot.eclipse.org:80/ws), that are tried in order in place of the host and port parameter of the construtor.\n\t * The uris are tried one at a time in order until one of them succeeds. Do not use this in conjunction with hosts as\n\t * the hosts array will be converted to uris and will overwrite this property.\n\t\t * @throws {InvalidState} If the client is not in disconnected state. The client must have received connectionLost\n\t\t * or disconnected before calling connect for a second or subsequent time.\n\t\t */\n\t\t\tthis.connect = function (connectOptions) {\n\t\t\t\tconnectOptions = connectOptions || {} ;\n\t\t\t\tvalidate(connectOptions,  {timeout:\"number\",\n\t\t\t\t\tuserName:\"string\",\n\t\t\t\t\tpassword:\"string\",\n\t\t\t\t\twillMessage:\"object\",\n\t\t\t\t\tkeepAliveInterval:\"number\",\n\t\t\t\t\tcleanSession:\"boolean\",\n\t\t\t\t\tuseSSL:\"boolean\",\n\t\t\t\t\tinvocationContext:\"object\",\n\t\t\t\t\tonSuccess:\"function\",\n\t\t\t\t\tonFailure:\"function\",\n\t\t\t\t\thosts:\"object\",\n\t\t\t\t\tports:\"object\",\n\t\t\t\t\treconnect:\"boolean\",\n\t\t\t\t\tmqttVersion:\"number\",\n\t\t\t\t\tmqttVersionExplicit:\"boolean\",\n\t\t\t\t\turis: \"object\"});\n\n\t\t\t\t// If no keep alive interval is set, assume 60 seconds.\n\t\t\t\tif (connectOptions.keepAliveInterval === undefined)\n\t\t\t\t\tconnectOptions.keepAliveInterval = 60;\n\n\t\t\t\tif (connectOptions.mqttVersion > 4 || connectOptions.mqttVersion < 3) {\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.mqttVersion, \"connectOptions.mqttVersion\"]));\n\t\t\t\t}\n\n\t\t\t\tif (connectOptions.mqttVersion === undefined) {\n\t\t\t\t\tconnectOptions.mqttVersionExplicit = false;\n\t\t\t\t\tconnectOptions.mqttVersion = 4;\n\t\t\t\t} else {\n\t\t\t\t\tconnectOptions.mqttVersionExplicit = true;\n\t\t\t\t}\n\n\t\t\t\t//Check that if password is set, so is username\n\t\t\t\tif (connectOptions.password !== undefined && connectOptions.userName === undefined)\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.password, \"connectOptions.password\"]));\n\n\t\t\t\tif (connectOptions.willMessage) {\n\t\t\t\t\tif (!(connectOptions.willMessage instanceof Message))\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [connectOptions.willMessage, \"connectOptions.willMessage\"]));\n\t\t\t\t\t// The will message must have a payload that can be represented as a string.\n\t\t\t\t\t// Cause the willMessage to throw an exception if this is not the case.\n\t\t\t\t\tconnectOptions.willMessage.stringPayload = null;\n\n\t\t\t\t\tif (typeof connectOptions.willMessage.destinationName === \"undefined\")\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.willMessage.destinationName, \"connectOptions.willMessage.destinationName\"]));\n\t\t\t\t}\n\t\t\t\tif (typeof connectOptions.cleanSession === \"undefined\")\n\t\t\t\t\tconnectOptions.cleanSession = true;\n\t\t\t\tif (connectOptions.hosts) {\n\n\t\t\t\t\tif (!(connectOptions.hosts instanceof Array) )\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\n\t\t\t\t\tif (connectOptions.hosts.length <1 )\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts, \"connectOptions.hosts\"]));\n\n\t\t\t\t\tvar usingURIs = false;\n\t\t\t\t\tfor (var i = 0; i<connectOptions.hosts.length; i++) {\n\t\t\t\t\t\tif (typeof connectOptions.hosts[i] !== \"string\")\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t\tif (/^(wss?):\\/\\/((\\[(.+)\\])|([^\\/]+?))(:(\\d+))?(\\/.*)$/.test(connectOptions.hosts[i])) {\n\t\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\t\tusingURIs = true;\n\t\t\t\t\t\t\t} else if (!usingURIs) {\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (usingURIs) {\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.hosts[i], \"connectOptions.hosts[\"+i+\"]\"]));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!usingURIs) {\n\t\t\t\t\t\tif (!connectOptions.ports)\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\t\t\t\t\t\tif (!(connectOptions.ports instanceof Array) )\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\t\t\t\t\t\tif (connectOptions.hosts.length !== connectOptions.ports.length)\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [connectOptions.ports, \"connectOptions.ports\"]));\n\n\t\t\t\t\t\tconnectOptions.uris = [];\n\n\t\t\t\t\t\tfor (var i = 0; i<connectOptions.hosts.length; i++) {\n\t\t\t\t\t\t\tif (typeof connectOptions.ports[i] !== \"number\" || connectOptions.ports[i] < 0)\n\t\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_TYPE, [typeof connectOptions.ports[i], \"connectOptions.ports[\"+i+\"]\"]));\n\t\t\t\t\t\t\tvar host = connectOptions.hosts[i];\n\t\t\t\t\t\t\tvar port = connectOptions.ports[i];\n\n\t\t\t\t\t\t\tvar ipv6 = (host.indexOf(\":\") !== -1);\n\t\t\t\t\t\t\turi = \"ws://\"+(ipv6?\"[\"+host+\"]\":host)+\":\"+port+path;\n\t\t\t\t\t\t\tconnectOptions.uris.push(uri);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconnectOptions.uris = connectOptions.hosts;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tclient.connect(connectOptions);\n\t\t\t};\n\n\t\t\t/**\n\t\t * Subscribe for messages, request receipt of a copy of messages sent to the destinations described by the filter.\n\t\t *\n\t\t * @name Paho.Client#subscribe\n\t\t * @function\n\t\t * @param {string} filter describing the destinations to receive messages from.\n\t\t * <br>\n\t\t * @param {object} subscribeOptions - used to control the subscription\n\t\t *\n\t\t * @param {number} subscribeOptions.qos - the maximum qos of any publications sent\n\t\t *                                  as a result of making this subscription.\n\t\t * @param {object} subscribeOptions.invocationContext - passed to the onSuccess callback\n\t\t *                                  or onFailure callback.\n\t\t * @param {function} subscribeOptions.onSuccess - called when the subscribe acknowledgement\n\t\t *                                  has been received from the server.\n\t\t *                                  A single response object parameter is passed to the onSuccess callback containing the following fields:\n\t\t *                                  <ol>\n\t\t *                                  <li>invocationContext if set in the subscribeOptions.\n\t\t *                                  </ol>\n\t\t * @param {function} subscribeOptions.onFailure - called when the subscribe request has failed or timed out.\n\t\t *                                  A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t *                                  <ol>\n\t\t *                                  <li>invocationContext - if set in the subscribeOptions.\n\t\t *                                  <li>errorCode - a number indicating the nature of the error.\n\t\t *                                  <li>errorMessage - text describing the error.\n\t\t *                                  </ol>\n\t\t * @param {number} subscribeOptions.timeout - which, if present, determines the number of\n\t\t *                                  seconds after which the onFailure calback is called.\n\t\t *                                  The presence of a timeout does not prevent the onSuccess\n\t\t *                                  callback from being called when the subscribe completes.\n\t\t * @throws {InvalidState} if the client is not in connected state.\n\t\t */\n\t\t\tthis.subscribe = function (filter, subscribeOptions) {\n\t\t\t\tif (typeof filter !== \"string\" && filter.constructor !== Array)\n\t\t\t\t\tthrow new Error(\"Invalid argument:\"+filter);\n\t\t\t\tsubscribeOptions = subscribeOptions || {} ;\n\t\t\t\tvalidate(subscribeOptions,  {qos:\"number\",\n\t\t\t\t\tinvocationContext:\"object\",\n\t\t\t\t\tonSuccess:\"function\",\n\t\t\t\t\tonFailure:\"function\",\n\t\t\t\t\ttimeout:\"number\"\n\t\t\t\t});\n\t\t\t\tif (subscribeOptions.timeout && !subscribeOptions.onFailure)\n\t\t\t\t\tthrow new Error(\"subscribeOptions.timeout specified with no onFailure callback.\");\n\t\t\t\tif (typeof subscribeOptions.qos !== \"undefined\" && !(subscribeOptions.qos === 0 || subscribeOptions.qos === 1 || subscribeOptions.qos === 2 ))\n\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [subscribeOptions.qos, \"subscribeOptions.qos\"]));\n\t\t\t\tclient.subscribe(filter, subscribeOptions);\n\t\t\t};\n\n\t\t/**\n\t\t * Unsubscribe for messages, stop receiving messages sent to destinations described by the filter.\n\t\t *\n\t\t * @name Paho.Client#unsubscribe\n\t\t * @function\n\t\t * @param {string} filter - describing the destinations to receive messages from.\n\t\t * @param {object} unsubscribeOptions - used to control the subscription\n\t\t * @param {object} unsubscribeOptions.invocationContext - passed to the onSuccess callback\n\t\t\t\t\t\t\t\t\t\t\t  or onFailure callback.\n\t\t * @param {function} unsubscribeOptions.onSuccess - called when the unsubscribe acknowledgement has been received from the server.\n\t\t *                                    A single response object parameter is passed to the\n\t\t *                                    onSuccess callback containing the following fields:\n\t\t *                                    <ol>\n\t\t *                                    <li>invocationContext - if set in the unsubscribeOptions.\n\t\t *                                    </ol>\n\t\t * @param {function} unsubscribeOptions.onFailure called when the unsubscribe request has failed or timed out.\n\t\t *                                    A single response object parameter is passed to the onFailure callback containing the following fields:\n\t\t *                                    <ol>\n\t\t *                                    <li>invocationContext - if set in the unsubscribeOptions.\n\t\t *                                    <li>errorCode - a number indicating the nature of the error.\n\t\t *                                    <li>errorMessage - text describing the error.\n\t\t *                                    </ol>\n\t\t * @param {number} unsubscribeOptions.timeout - which, if present, determines the number of seconds\n\t\t *                                    after which the onFailure callback is called. The presence of\n\t\t *                                    a timeout does not prevent the onSuccess callback from being\n\t\t *                                    called when the unsubscribe completes\n\t\t * @throws {InvalidState} if the client is not in connected state.\n\t\t */\n\t\t\tthis.unsubscribe = function (filter, unsubscribeOptions) {\n\t\t\t\tif (typeof filter !== \"string\" && filter.constructor !== Array)\n\t\t\t\t\tthrow new Error(\"Invalid argument:\"+filter);\n\t\t\t\tunsubscribeOptions = unsubscribeOptions || {} ;\n\t\t\t\tvalidate(unsubscribeOptions,  {invocationContext:\"object\",\n\t\t\t\t\tonSuccess:\"function\",\n\t\t\t\t\tonFailure:\"function\",\n\t\t\t\t\ttimeout:\"number\"\n\t\t\t\t});\n\t\t\t\tif (unsubscribeOptions.timeout && !unsubscribeOptions.onFailure)\n\t\t\t\t\tthrow new Error(\"unsubscribeOptions.timeout specified with no onFailure callback.\");\n\t\t\t\tclient.unsubscribe(filter, unsubscribeOptions);\n\t\t\t};\n\n\t\t\t/**\n\t\t * Send a message to the consumers of the destination in the Message.\n\t\t *\n\t\t * @name Paho.Client#send\n\t\t * @function\n\t\t * @param {string|Paho.Message} topic - <b>mandatory</b> The name of the destination to which the message is to be sent.\n\t\t * \t\t\t\t\t   - If it is the only parameter, used as Paho.Message object.\n\t\t * @param {String|ArrayBuffer} payload - The message data to be sent.\n\t\t * @param {number} qos The Quality of Service used to deliver the message.\n\t\t * \t\t<dl>\n\t\t * \t\t\t<dt>0 Best effort (default).\n\t\t *     \t\t\t<dt>1 At least once.\n\t\t *     \t\t\t<dt>2 Exactly once.\n\t\t * \t\t</dl>\n\t\t * @param {Boolean} retained If true, the message is to be retained by the server and delivered\n\t\t *                     to both current and future subscriptions.\n\t\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n\t\t *                     A received message has the retained boolean set to true if the message was published\n\t\t *                     with the retained boolean set to true\n\t\t *                     and the subscrption was made after the message has been published.\n\t\t * @throws {InvalidState} if the client is not connected.\n\t\t */\n\t\t\tthis.send = function (topic,payload,qos,retained) {\n\t\t\t\tvar message ;\n\n\t\t\t\tif(arguments.length === 0){\n\t\t\t\t\tthrow new Error(\"Invalid argument.\"+\"length\");\n\n\t\t\t\t}else if(arguments.length == 1) {\n\n\t\t\t\t\tif (!(topic instanceof Message) && (typeof topic !== \"string\"))\n\t\t\t\t\t\tthrow new Error(\"Invalid argument:\"+ typeof topic);\n\n\t\t\t\t\tmessage = topic;\n\t\t\t\t\tif (typeof message.destinationName === \"undefined\")\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT,[message.destinationName,\"Message.destinationName\"]));\n\t\t\t\t\tclient.send(message);\n\n\t\t\t\t}else {\n\t\t\t\t//parameter checking in Message object\n\t\t\t\t\tmessage = new Message(payload);\n\t\t\t\t\tmessage.destinationName = topic;\n\t\t\t\t\tif(arguments.length >= 3)\n\t\t\t\t\t\tmessage.qos = qos;\n\t\t\t\t\tif(arguments.length >= 4)\n\t\t\t\t\t\tmessage.retained = retained;\n\t\t\t\t\tclient.send(message);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t * Publish a message to the consumers of the destination in the Message.\n\t\t * Synonym for Paho.Mqtt.Client#send\n\t\t *\n\t\t * @name Paho.Client#publish\n\t\t * @function\n\t\t * @param {string|Paho.Message} topic - <b>mandatory</b> The name of the topic to which the message is to be published.\n\t\t * \t\t\t\t\t   - If it is the only parameter, used as Paho.Message object.\n\t\t * @param {String|ArrayBuffer} payload - The message data to be published.\n\t\t * @param {number} qos The Quality of Service used to deliver the message.\n\t\t * \t\t<dl>\n\t\t * \t\t\t<dt>0 Best effort (default).\n\t\t *     \t\t\t<dt>1 At least once.\n\t\t *     \t\t\t<dt>2 Exactly once.\n\t\t * \t\t</dl>\n\t\t * @param {Boolean} retained If true, the message is to be retained by the server and delivered\n\t\t *                     to both current and future subscriptions.\n\t\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n\t\t *                     A received message has the retained boolean set to true if the message was published\n\t\t *                     with the retained boolean set to true\n\t\t *                     and the subscrption was made after the message has been published.\n\t\t * @throws {InvalidState} if the client is not connected.\n\t\t */\n\t\t\tthis.publish = function(topic,payload,qos,retained) {\n\t\t\t\tvar message ;\n\n\t\t\t\tif(arguments.length === 0){\n\t\t\t\t\tthrow new Error(\"Invalid argument.\"+\"length\");\n\n\t\t\t\t}else if(arguments.length == 1) {\n\n\t\t\t\t\tif (!(topic instanceof Message) && (typeof topic !== \"string\"))\n\t\t\t\t\t\tthrow new Error(\"Invalid argument:\"+ typeof topic);\n\n\t\t\t\t\tmessage = topic;\n\t\t\t\t\tif (typeof message.destinationName === \"undefined\")\n\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT,[message.destinationName,\"Message.destinationName\"]));\n\t\t\t\t\tclient.send(message);\n\n\t\t\t\t}else {\n\t\t\t\t\t//parameter checking in Message object\n\t\t\t\t\tmessage = new Message(payload);\n\t\t\t\t\tmessage.destinationName = topic;\n\t\t\t\t\tif(arguments.length >= 3)\n\t\t\t\t\t\tmessage.qos = qos;\n\t\t\t\t\tif(arguments.length >= 4)\n\t\t\t\t\t\tmessage.retained = retained;\n\t\t\t\t\tclient.send(message);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/**\n\t\t * Normal disconnect of this Messaging client from its server.\n\t\t *\n\t\t * @name Paho.Client#disconnect\n\t\t * @function\n\t\t * @throws {InvalidState} if the client is already disconnected.\n\t\t */\n\t\t\tthis.disconnect = function () {\n\t\t\t\tclient.disconnect();\n\t\t\t};\n\n\t\t\t/**\n\t\t * Get the contents of the trace log.\n\t\t *\n\t\t * @name Paho.Client#getTraceLog\n\t\t * @function\n\t\t * @return {Object[]} tracebuffer containing the time ordered trace records.\n\t\t */\n\t\t\tthis.getTraceLog = function () {\n\t\t\t\treturn client.getTraceLog();\n\t\t\t};\n\n\t\t\t/**\n\t\t * Start tracing.\n\t\t *\n\t\t * @name Paho.Client#startTrace\n\t\t * @function\n\t\t */\n\t\t\tthis.startTrace = function () {\n\t\t\t\tclient.startTrace();\n\t\t\t};\n\n\t\t\t/**\n\t\t * Stop tracing.\n\t\t *\n\t\t * @name Paho.Client#stopTrace\n\t\t * @function\n\t\t */\n\t\t\tthis.stopTrace = function () {\n\t\t\t\tclient.stopTrace();\n\t\t\t};\n\n\t\t\tthis.isConnected = function() {\n\t\t\t\treturn client.connected;\n\t\t\t};\n\t\t};\n\n\t\t/**\n\t * An application message, sent or received.\n\t * <p>\n\t * All attributes may be null, which implies the default values.\n\t *\n\t * @name Paho.Message\n\t * @constructor\n\t * @param {String|ArrayBuffer} payload The message data to be sent.\n\t * <p>\n\t * @property {string} payloadString <i>read only</i> The payload as a string if the payload consists of valid UTF-8 characters.\n\t * @property {ArrayBuffer} payloadBytes <i>read only</i> The payload as an ArrayBuffer.\n\t * <p>\n\t * @property {string} destinationName <b>mandatory</b> The name of the destination to which the message is to be sent\n\t *                    (for messages about to be sent) or the name of the destination from which the message has been received.\n\t *                    (for messages received by the onMessage function).\n\t * <p>\n\t * @property {number} qos The Quality of Service used to deliver the message.\n\t * <dl>\n\t *     <dt>0 Best effort (default).\n\t *     <dt>1 At least once.\n\t *     <dt>2 Exactly once.\n\t * </dl>\n\t * <p>\n\t * @property {Boolean} retained If true, the message is to be retained by the server and delivered\n\t *                     to both current and future subscriptions.\n\t *                     If false the server only delivers the message to current subscribers, this is the default for new Messages.\n\t *                     A received message has the retained boolean set to true if the message was published\n\t *                     with the retained boolean set to true\n\t *                     and the subscrption was made after the message has been published.\n\t * <p>\n\t * @property {Boolean} duplicate <i>read only</i> If true, this message might be a duplicate of one which has already been received.\n\t *                     This is only set on messages received from the server.\n\t *\n\t */\n\t\tvar Message = function (newPayload) {\n\t\t\tvar payload;\n\t\t\tif (   typeof newPayload === \"string\" ||\n\t\tnewPayload instanceof ArrayBuffer ||\n\t\t(ArrayBuffer.isView(newPayload) && !(newPayload instanceof DataView))\n\t\t\t) {\n\t\t\t\tpayload = newPayload;\n\t\t\t} else {\n\t\t\t\tthrow (format(ERROR.INVALID_ARGUMENT, [newPayload, \"newPayload\"]));\n\t\t\t}\n\n\t\t\tvar destinationName;\n\t\t\tvar qos = 0;\n\t\t\tvar retained = false;\n\t\t\tvar duplicate = false;\n\n\t\t\tObject.defineProperties(this,{\n\t\t\t\t\"payloadString\":{\n\t\t\t\t\tenumerable : true,\n\t\t\t\t\tget : function () {\n\t\t\t\t\t\tif (typeof payload === \"string\")\n\t\t\t\t\t\t\treturn payload;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\treturn parseUTF8(payload, 0, payload.length);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"payloadBytes\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() {\n\t\t\t\t\t\tif (typeof payload === \"string\") {\n\t\t\t\t\t\t\tvar buffer = new ArrayBuffer(UTF8Length(payload));\n\t\t\t\t\t\t\tvar byteStream = new Uint8Array(buffer);\n\t\t\t\t\t\t\tstringToUTF8(payload, byteStream, 0);\n\n\t\t\t\t\t\t\treturn byteStream;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn payload;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"destinationName\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return destinationName; },\n\t\t\t\t\tset: function(newDestinationName) {\n\t\t\t\t\t\tif (typeof newDestinationName === \"string\")\n\t\t\t\t\t\t\tdestinationName = newDestinationName;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [newDestinationName, \"newDestinationName\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"qos\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return qos; },\n\t\t\t\t\tset: function(newQos) {\n\t\t\t\t\t\tif (newQos === 0 || newQos === 1 || newQos === 2 )\n\t\t\t\t\t\t\tqos = newQos;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(\"Invalid argument:\"+newQos);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"retained\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return retained; },\n\t\t\t\t\tset: function(newRetained) {\n\t\t\t\t\t\tif (typeof newRetained === \"boolean\")\n\t\t\t\t\t\t\tretained = newRetained;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow new Error(format(ERROR.INVALID_ARGUMENT, [newRetained, \"newRetained\"]));\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"topic\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return destinationName; },\n\t\t\t\t\tset: function(newTopic) {destinationName=newTopic;}\n\t\t\t\t},\n\t\t\t\t\"duplicate\":{\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tget: function() { return duplicate; },\n\t\t\t\t\tset: function(newDuplicate) {duplicate=newDuplicate;}\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\t// Module contents.\n\t\treturn {\n\t\t\tClient: Client,\n\t\t\tMessage: Message\n\t\t};\n\t// eslint-disable-next-line no-nested-ternary\n\t})(typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n\treturn PahoMQTT;\n});\n"],
  "mappings": "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",
  "names": ["global", "scope", "action", "client", "args", "i", "host", "port"]
}
